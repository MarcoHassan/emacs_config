* General sources

As a general resources for generating my emacs configuration I mainly
refer to [[https://cestlaz.github.io/tags/emacs/page/6/][emacs_intro_&packages]], [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz emacs config]]. Harry
Schwartz shared a video on the internet containing a good introduction
to the org mode and suggested the option of writing the emacs
configuration file as =org= file as I am currently doing, which I
enjoy a lot and believe it gives a great overview over the document.

** TODO watch [[https://www.youtube.com/watch?v=GK3fij-D1G8][this]] incredible video describing literate programming within Org-mode and try to incorporate the mode


* Increase cache allowed

From Howard Abraham...

With a long history of working on small machines without gigabytes of RAM, we might as well let Emacs be the beast it has always dreamed.

First, letâ€™s increase the cache:

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
#+END_SRC


* Shortcut to Configuration File

This section creates a shortcut key to go to this =emacs=
configuration file without having to search for the directory.
#+BEGIN_SRC emacs-lisp
    (defun hrs/visit-emacs-config ()
      (interactive)
      (find-file "~/Desktop/emacs_config/emacs_configuration.org"))

    (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)

#+END_SRC



* Open Emacs with bash shell on Windows OS

#+BEGIN_SRC emacs-lisp
    (defun my-bash-on-windows-shell ()
      (interactive)
      (let ((explicit-shell-file-name "C:/Windows/System32/bash.exe"))
	(cd "C:/Users/Marco Hassan/Desktop")
	(shell)))

    ;; if you want to run the above function iteractively when using emacs with M-x specify it as (interactive) at the end.

    (my-bash-on-windows-shell)

    ;; Necessary on windows as two shell windows are somehow opened.
    (delete-window)

    (setq-default explicit-shell-file-name "bash") ;; set default for shell as bash

    ;; set default directory on start up to be the windows desktop
    (setq default-directory "C:/Users/Marco Hassan/Desktop")    
#+END_SRC


** TODO open windows DOS as shell.

Refer to the previous chunk. It is straight intuitive how to do that.

Define a function to open Windows DOS command prompt and operate
directly on windows operating system. This is for instance necessary
when in need of downloading pip libraries etc.



* Make sure you can use standard lisp functions and macros

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC


* Enable MELPA package manager

#+BEGIN_SRC emacs-lisp
    (require 'package)
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			(not (gnutls-available-p))))
	   (proto (if no-ssl "http" "https")))
      ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
      (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
      (when (< emacs-major-version 24)
	;; For important compatibility libraries like cl-lib
	(add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
    (package-initialize)
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(org-agenda-files (quote ("~/Desktop/prova.org")))
     '(package-selected-packages
       (quote
	(org-bullets htmlize auctex virtualenvwrapper pyenv-mode ein py-autopep8 flycheck elpy monokai-theme))))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )
#+END_SRC


* Enable Marmalade and Org ELPA package manager

Org ELPA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((marmalade . http://marmalade-repo.org/packages/) (marmalade . http://orgmode.org/packages/) (gnu . https://elpa.gnu.org/packages/) (melpa-stable . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))

Marmalade
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("marmalade" .  "http://marmalade-repo.org/packages/"))
#+END_SRC





* Basic Customization
 
** No beeps, scrollbar etc.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)             ;; Get rid of the beeps

(when (window-system)
  (tool-bar-mode 0)               ;; Toolbars were only cool with XEmacs
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (scroll-bar-mode -1))            ;; Scrollbars are waste screen estate
#+END_SRC

#+RESULTS:

** Highlight color

   Set highlight color when activate the "mark set" to be a different
   color than gray as it is poorly recognizable with the theme and the
   line highlighting mode.

#+BEGIN_SRC emacs-lisp
      (defun color-highlight ()
	(interactive)
	(set-face-attribute 'region nil :background "brown4" :foreground "grey5"))
#+END_SRC


#+RESULTS:
: color-highlight

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'color-highlight) ;; to actiavte it when starting emacs.
#+END_SRC

Create general function to set transparency.
#+BEGIN_SRC emacs-lisp
 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC   
** Two very handy tricks from Howard Abraham

   - Replace yes-no answers with y-n. 

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   - Fix the scrolling =C-v= and =M-v= such that the cursor will
     return to the previous scrolling position if going down and up.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
          scroll-preserve-screen-position t)
   #+END_SRC

   #+RESULTS:
   : t

** Undo Redo Tree 
   
   This is a very nice package that allows you to expand on the basics
   emacs undo functionalities. In emacs you can undo with =C-_= or
   =C-/=.

   The package undo-tre allows you to have the redo option with
   =C-?=.

   Moreover it allows you to visualize a tree with the changes you
   have done and to move interactively across it to go back to a given
   point in you history. 

   If you code something and then cancel that something and code
   something else, the undo tree will show a branch at this stage
   with the two versions of your edit.

   Require the package and enable it globally.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+END_SRC

** Parenthesis

   Try this package for parenthesis highlighting. 

   Learn how to quickly operate with parenthesis using predit through
   the following link [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][predit-tutorial.]]

   #+BEGIN_SRC emacs-lisp
     (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
   #+END_SRC

   Despite being super useful paredit unfortunately conflicts with the
   usual <DEL>. This will not allow to cancel entire chunks of
   highlighted text. Set another key binding for paredit delete.

#+BEGIN_SRC emacs-lisp
  eval-after-load 'paredit
  '((define-key paredit-mode-map (kbd "<DEL>") nil))

  (add-hook 'org-mode-hook 'enable-paredit-mode) ;; notice at the moment paredit is just bound to org-mode. Expand it.

#+END_SRC


Rainbow-delimiters is convenient for coloring matching parentheses.

    ,#+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters) 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode) ;; to enable it in all programming-related modes
   #+END_SRC

** Kill current buffer and close its window

#+BEGIN_SRC emacs-lisp
    ;; Always kill current buffer with "C-x k"
    (defun bjm/kill-this-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer))
      (delete-window))

    (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+END_SRC

In case you want to select as standard which buffer to kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC

** Save cursor current position when killing the file

   Using save-place-mode saves the location of point for every file I
   visit. If I close the file or close the editor, then later re-open
   it, point will be at the last place I visited.

#+BEGIN_SRC emacs-lisp
    (save-place-mode t)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)
#+END_SRC

#+RESULTS:
| set-hl-line-color-based-on-theme |

** Inhibit start up messages

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t);; this will hide the initial tutorial
#+END_SRC

*** Remove Other start up buffers

#+BEGIN_SRC emacs-lisp
    ;; Makes *scratch* empty.
    (setq initial-scratch-message "")

    ;; Removes *scratch* from buffer after the mode has been set.
    (defun remove-scratch-buffer ()
      (if (get-buffer "*scratch*")
	  (kill-buffer "*scratch*")))
    (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+END_SRC

Uncomment the next buffer if you want to inhibit start up messages and
kill the buffer. 

#+BEGIN_SRC emacs-lisp
    ;; Removes *messages* from the buffer.
    ;;(setq-default message-log-max nil)
    ;;(kill-buffer "*Messages*")
#+END_SRC

** Load monokai theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t) ;; load the black monokai theme  
#+END_SRC

** Set lining globally

#+BEGIN_SRC emacs-lisp
    (global-linum-mode t) ;; load line number at the beginning of the
			  ;; file. Notice the global argument means that
			  ;; this line configuration will apply to all
			  ;; buffers in emacs. You can also enable things
			  ;; per mode - e.g., python-mode, markdown-mode,
			  ;; text-mode.
#+END_SRC

** Moving across windows

#+BEGIN_SRC emacs-lisp
  ; add this to init.el
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC

** Hungry mode
*** Smart hungry mode

    Try to use the smart-hungry-delete that sets the global keys
    explicitly.

    Download the package manually from [[https://github.com/hrehfeld/emacs-smart-hungry-delete][smart_hungry-github]]. Could not
    find the package on MELPA.

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "c:/Users/Marco Hassan/.emacs.d/emacs-smart-hungry-delete/")
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
  (load "smart-hungry-delete")
 #+END_SRC 

   Add forward hungry deletion

 #+BEGIN_SRC emacs-lisp
   (smart-hungry-delete-add-default-hooks)
   (global-set-key (kbd "C-c d") 'smart-hungry-delete-forward-char)
   (global-set-key (kbd "C-c <backspace>") 'smart-hungry-delete-backward-char)
 #+END_SRC

   Ok. Works fine. I also like the fact that it keeps a space between.

** Expand region

   This package allows you to expand the highlighting from inside to
   outside. That is from the inner most layer to the layers above. For
   instance if you are into a parenthesis it will allow you to expand
   from letter to word, to the entire parenthesis, function, etc.

#+BEGIN_SRC emacs-lisp
  ;; (use-package expand-region
  ;;   :ensure t 
  ;;   :config
  ;;   (global-set-key (kbd "C-*") 'er/expand-region)
  ;; )
#+END_SRC

New version of expand region. Try it and see which one you like better

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (defun ha/expand-region (lines)
    "Prefix-oriented wrapper around Magnar's `er/expand-region'.

Call with LINES equal to 1 (given no prefix), it expands the
region as normal.  When LINES given a positive number, selects
the current line and number of lines specified.  When LINES is a
negative number, selects the current line and the previous lines
specified.  Select the current line if the LINES prefix is zero."
    (interactive "p")
    (cond ((= lines 1)   (er/expand-region 1))
          ((< lines 0)   (ha/expand-previous-line-as-region lines))
          (t             (ha/expand-next-line-as-region (1+ lines)))))

  (defun ha/expand-next-line-as-region (lines)
    (message "lines = %d" lines)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line lines))

  (defun ha/expand-previous-line-as-region (lines)
    (end-of-line)
    (set-mark (point))
    (beginning-of-line (1+ lines)))

  :bind ("C-*" . ha/expand-region))
#+END_SRC

** Highlight comments for improved visualization of important stuff

This gives the option to delete comments or to mark them in red and
green.

Below there is just the definition of the function. You should add a
hook in each programming mode to make sure the comment visualization
is working correctly.

#+BEGIN_SRC emacs-lisp
(make-face 'font-lock-comment-important)
(set-face-foreground 'font-lock-comment-important "#00ff00")

(make-face 'font-lock-comment-todo)
(set-face-foreground 'font-lock-comment-todo "#ff0000")

(make-face 'font-lock-comment-strike)
(set-face-attribute 'font-lock-comment-strike
nil :strike-through t)

(defun add-custom-keyw()
"adds a few special keywords"
(font-lock-add-keywords
nil
'(("ct \\(.+\\)" 1 'font-lock-comment-strike prepend)
("r \\(.+\\)" 1 'font-lock-comment-todo prepend)
("g \\(.+\\)" 1 'font-lock-comment-important prepend)
)
))
#+END_SRC

#+RESULTS:
: add-custom-keyw

Example of adding the hook

#+Name: Add comments highlighting for python mode.
#+BEGIN_SRC emacs-lisp
;;(add-hook 'python-mode-hook 'add-custom-keyw)
#+END_SRC

** Beacon Mode

   This emits a short light when the you move your cursor around the
   screen in a fast way. That should help you to quickly identify
   where your cursor is and not to get lost when quickly scrolling on
   the screen.

   You can set in the parameter for deciding when the beacon should
   work. Moreover, you define how long the light should flash. For
   this and several other options check at the github repo [[https://github.com/Malabarba/beacon][beacon]].

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t 
    :config
    (beacon-mode 1)
    (setq beacon-color "#50D050") ;; a light green
   )
#+END_SRC

   Work nicely. Seems to slow emacs though. Try to observe on the long
   run if it slows it sensibly and remove it if this is the case. 

** Unfill paragraph

   Might be good. For instance for canceling all of the paragraph quickly
   or for commenting it away.

   #+BEGIN_SRC emacs-lisp
     (defun unfill-paragraph ()
       "Convert a multi-line paragraph into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
	 (fill-paragraph nil)))

     ;; Handy key definition
     (define-key global-map "\M-Q" 'unfill-paragraph)
   #+END_SRC

** Aggressive Indent

   Automatically indents all of your code. 

#+BEGIN_SRC emacs-lisp
  (global-aggressive-indent-mode)
#+END_SRC


* Swiper for incremental search

Swiper allows you to easily leverage regular expressions. By entering
a the beginning of a word a space and some other parts of the next
world it will automatically search two words pairs each containing the
expression entered.

Before compiling the code below remember to install through melpa both
swiper as counsel.

#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
:ensure t
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))
#+END_SRC


* Auto completion of words

To automatically advice on auto-completion given the words used in the
buffer.

** Company


*** General set up.

Try with company mode. Company mode integrates with flyspell in
org-mode and it is there chosen as the default auto-completion mode
for the org-mode.
#+Name: Company-auto-complete
#+BEGIN_SRC emacs-lisp
      (use-package company
	:config
        (setq company-dabbrev-downcase 0) ;; I noted that company is particularly slow in suggesting auto-completion words in comparison to auto-complete. 
        (setq company-idle-delay 0)       ;; The below code was suggested on the internet to speed company suggestion up and is tried now.
	(global-company-mode t)                                  ;(add-hook 'org-mode-hook 'company-mode)
	 )
#+END_SRC

The performance of company increased a lot with the two global options.

*** Synchronize company with pcomplete for org mode 

    Pcomplete integrates company such that when editing headers,
    processes, title and author and any other options in org mode
    starting with =#+= it will list all of the available options.

#+BEGIN_SRC emacs-lisp
(defun trigger-org-company-complete ()
  "Begins company-complete in org-mode buffer after pressing #+ chars."
  (interactive)
  (if (string-equal "#" (string (preceding-char)))
    (progn
      (insert "+")
      (company-complete))
    (insert "+")))

(eval-after-load 'org '(define-key org-mode-map
               (kbd "+") 'trigger-org-company-complete))
#+END_SRC

#+RESULTS:
: trigger-org-company-complete

*** Company cycle through

Very handy way to work with company such that you do not have to enter
the word you are interested in with the =RET= command but can rather
cycle through them with the =TAB= command. This will autocomplete the
word and you can then continue writing with the space.

Link for this handy tool: [[https://gist.github.com/aaronjensen/a46f88dbd1ab9bb3aa22][cycle_company]].

 #+BEGIN_SRC emacs-lisp
 ;; Modify company so that tab and S-tab cycle through completions without
 ;; needing to hit enter.

 (defvar-local company-simple-complete--previous-prefix nil)
 (defvar-local company-simple-complete--before-complete-point nil)

 (defun company-simple-complete-frontend (command)
   (when (or (eq command 'show)
             (and (eq command 'update)
                  (not (equal company-prefix company-simple-complete--previous-prefix))))
     (setq company-selection -1
           company-simple-complete--previous-prefix company-prefix
           company-simple-complete--before-complete-point nil)))

 (defun company-simple-complete-next (&optional arg)
   (interactive "p")
   (company-select-next arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete-previous (&optional arg)
   (interactive "p")
   (company-select-previous arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete//complete-selection-and-stay ()
   (if (cdr company-candidates)
       (when (company-manual-begin)
         (when company-simple-complete--before-complete-point
           (delete-region company-simple-complete--before-complete-point (point)))
         (setq company-simple-complete--before-complete-point (point))
         (unless (eq company-selection -1)
           (company--insert-candidate (nth company-selection company-candidates)))
         (company-call-frontends 'update)
         (company-call-frontends 'post-command))
     (company-complete-selection)))

 (defadvice company-set-selection (around allow-no-selection (selection &optional force-update))
   "Allow selection to be -1"
   (setq selection
         ;; TODO deal w/ wrap-around
         (if company-selection-wrap-around
             (mod selection company-candidates-length)
           (max -1 (min (1- company-candidates-length) selection))))
   (when (or force-update (not (equal selection company-selection)))
     (setq company-selection selection
           company-selection-changed t)
     (company-call-frontends 'update)))

 (defadvice company-tooltip--lines-update-offset (before allow-no-selection (selection _num-lines _limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (defadvice company-tooltip--simple-update-offset (before allow-no-selection (selection _num-lines limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (with-eval-after-load 'company
   (define-key company-active-map [tab] 'company-simple-complete-next)
   (define-key company-active-map (kbd "TAB") 'company-simple-complete-next)
   (define-key company-active-map (kbd "<S-tab>") 'company-simple-complete-previous)
   (define-key company-active-map (kbd "RET") nil)
   (define-key company-active-map (kbd "<return>") nil)

   (put 'company-simple-complete-next 'company-keep t)
   (put 'company-simple-complete-previous 'company-keep t)
   (setq company-require-match nil)
   (ad-activate 'company-set-selection)
   (ad-activate 'company-tooltip--simple-update-offset)
   (ad-activate 'company-tooltip--lines-update-offset)
   (add-to-list 'company-frontends 'company-simple-complete-frontend))

 (provide 'company-simple-complete)
 #+END_SRC

 #+RESULTS:
 : company-simple-complete


* Redirect Back up files into a single file

This saves all of the back-up files in the =.~/.saves=  directory and
keeps your other directories clear from them.

#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC


* Set Ispell Dictionary


Since emacs 24.4+ ispell.el has built-in support for detecting
Hunspell dictionaries and there is no manual configuration needed.

Just specify the global language that should be used when using the
dictionary.

#+Name: Ispell 
#+BEGIN_SRC emacs-lisp 
    (setq ispell-dictionary "english")
#+END_SRC


* Latex 

Some configuration for Latex. Still to be improved.

#+Name: Latex
#+BEGIN_SRC emacs-lisp
  ;;(setq reftex-plug-into-AUCTeX t)

  ;;(use-package latex)

  ;; Automatically activate latex mode
  ;;(autoload 'LaTex-mode "LaTex-mode" "LaTex Mode." t)

  ;; Automatically activate flyspell mode - failed.
  ;;(use-package flyspell
    ;;:config
    ;;(add-hook 'LaTex-mode-hook '(flyspell-mode)))


    ;;(add-hook 'LaTeX-mode-hook '(flyspell-mode t))
    ;; If you use AUCTeX
    ;;(load "auctex.el" nil t t)`
    ;;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
    ;;(load "preview-latex.el" nil t t)
    ;;(setq TeX-auto-save t)
    ;;(setq TeX-parse-self t)
    ;;(setq-default TeX-master nil)
#+END_SRC

** TODO finish latex config 
   SCHEDULED: <2019-05-23 gio>
   

* Snippets

Snippets are a powerful tool that consists of pre-compiled code that
you can enter through some shortcuts. You can either enter and save
your own snippet or you can leverage the already built-in
snippets. These are various and allows you for instance to create
classes, open loops, etc. 

The package for working with snippets is =yasnippet= and the
documentation for the various snippets can be found at

#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC


** Yasnippet-snippets

Also download the yasnippet-snippets library. There are many more
snippets there in comparison to the one included in the auto-yasnippet
above and I believe it might be useful working with these.

In his documentation he says that all the snippets will load
automatically as soon as yasnippet loads. Let's see.

Nice. This was correct. Once you downlaod the package through MELPA or
manually setting it into your working directory the snippets will
automatically be avaiable. No need for configuration in emacs.




* Org Mode

Very nice mode.


  To run jupyter like workflow in org mode displaying graphs, using
  multiple languages etc. Notice at the moment I have issue. 

  Package is not on MELPA, but it should. Install it manually. Then you should
  be able to run the below and start to operate through in org-mode
  via ob-ipython.

  I downloaded the package manually in the =.emacs.d= folder. Load it
  adding it to your load path.

#+BEGIN_SRC emacs-lisp
  ;; Tell emacs where is your personal elisp lib dir
  (add-to-list 'load-path "c:/Users/Marco Hassan/.emacs.d/ob-ipython/")

#+END_SRC


#+BEGIN_SRC emacs-lisp
 (load "obipython")

  ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC


  #+begin_src emacs-lisp 
    ;; Org Mode
    ;; ========

    ;; To open all .org files in org mode.
    (autoload 'org-mode "org-mode" "Org Mode." t)

    ;; Necessary to download org from MELPA at first.
    ;; Moreover necessary to download the USE-PACKAGE library.
    (use-package org)

    ;; Activate flyspell for org documents.
    (use-package flyspell
      :config
      (add-hook 'org-mode-hook 'flyspell-mode))

    ;; Use syntax highlighting in source blocks while editing.
    (setq org-src-fontify-natively t)

    ;; Make TAB act as if it were issued in a buffer of the languages major mode.
    (setq org-src-tab-acts-natively t)

    ;; I like to see an outline of pretty bullets instead of a list of asterisks.
    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook 'org-bullets-mode))

    ;; I like seeing a little downward-pointing arrow instead of the usual
    ;; ellipsis (...) that org displays when there is stuff under a header.
    (setq org-ellipsis " >>")

    ;; Shortcut for org agenda
    (define-key global-map "\C-ca" 'org-agenda)

    ;; Exporting in markdown and beamer mode
    (require 'ox-md)
    (require 'ox-beamer)

    ;; workaround for not workign source code shortcut
    (when (version<= "9.2" (org-version))
	(require 'org-tempo))

    ;; specify to-do iterations with C-c t
    (setq org-todo-keywords
	  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))


    ;; Babel evaluing ;;

    ;; For babel evaluing in R
    (require 'ess-site)

    ;; Allowing minted to highlight code in latex mode when exporting
    (setq org-latex-pdf-process
	  '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	    "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	    "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)

    ;; Allow code evaluation in the org mode source code chunck

    (use-package gnuplot) ;; recall to download it trough MELPA at first

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (R . t)
       (sql . t)
       (python . t)
       (ipython . t)
       (shell . t)
       (emacs-lisp . t)
       ))

    ;; Don't ask before executing code in the chunck.
    (setq org-confirm-babel-evaluate nil)
  #+end_src

** Shortcuts to insert chunk of code

   With the global key board shortcut you can further insert the name of
   a section in emacs.

   Notice the below method do write a lambda function that requires no
   name and previous specification and to execute it just in org-mode so
   that the shortcut is defined just for the defined mode.

   #+Name: write_name
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c q") "#+Name: ")))
   #+END_SRC

   The next three chunck define shortcuts for creating chunck in
   different languages.

   #+Name: write_source_lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 1") "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC")))
   #+END_SRC

   #+Name: write_source_R
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 2") "#+BEGIN_SRC R\n\n#+END_SRC")))
   #+END_SRC

   #+Name: write_source_python
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 3") "#+BEGIN_SRC python\n\n#+END_SRC")))
   #+END_SRC

*** TODO Consider Snippets
    
    The below works but I have noted that it usually takes a while to
    insert a chunk. Another viable solution is to use
    snippets. Consider that



* Tramp

  To be implemented using: [[https://cestlaz.github.io/posts/using-emacs-25-tramp/][tramp_tut]].


* Python 

Set path to python executable so that emacs can leverage it. This
step is necessary when operating through Windows OS.

#+Name: Python Mode and virtual environment activation.
#+BEGIN_SRC emacs-lisp
  ;; Ativate elpy package to run python code
  (elpy-enable) ;; initialize elpy for python IDE in emacs

  ;; Activate flycheck instead of flymake from eply package
   (when (require 'flycheck  nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; Activate autopep. This integrates with Emacs so that when you save a
  ;; file trough the -C-x C-s- cmd it will automatically format and correct
  ;; any PEP8 errors (excluding the ones that you may specify)

  ;; Did not especially appreciated autopep8. Leave it out.
  ;(require 'py-autopep8)
  ;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

  ;; Integrate the eply mode with the IPython REPL and the Jupyter Notebooks.
  ;; This will allow to run Jupyter Notebooks that looks  very much like
  ;; R .rmd files directly on Emacs !after connecting to the notebook online!

  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-args "-i --simple-prompt");; uses ipython interpreter

  ;; Set standard python interpreter as python 3
  (setq elpy-rpc-python-command "python")

  ;; Set up virtual environments emacs connection
  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support
  ;; note that setting `venv-location` is not necessary if you
  ;; use the default location (`~/.virtualenvs`), or if the
  ;; the environment variable `WORKON_HOME` points to the right place
  (setq venv-location "c:/Users/Marco Hassan/Desktop/Python/virtual_envs/")

  ;; Add hook for cÃ²mment highlighting.
  (add-hook 'python-mode-hook 'add-custom-keyw)
#+END_SRC

#+RESULTS: Python Mode and virtual environment activation.
| add-custom-keyw | elpy-mode |

Good. After installing ipyhton thorugh pip everything is working
smoothly. Remember to run pip on DOS and not on emacs shell as at the
moment emacs shell is set to be the shell interacting with the Linux partition.


* TO BE CONTINUED

#+Name: Highlight uncommited lines for Git
#+BEGIN_SRC emacs-lisp
  ;;Use the diff-hl package to highlight changed-and-uncommitted lines
  ;;when programming.

  ;;(use-package diff-hl
  ;;  :config
  ;;  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  ;;  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC


* TO DO

** TODO Incorporate unique file for agenda. There should be packages to further incorporate simple tools for making efficient agendas

   This should be especially done looking at harry shwartz
   configuration file at the beginning. He masters it quite well.
   
   Makes also sense to look at the app integrating org mode to do on
   the phone.

** TODO Continue watching blog of the guy with tons of emacs tricks
   Find the link also at the beginning.
** TODO Further understand how to improve literate programming in org mode 
** TODO Watch dracula mood and theme of this crazy video about org mode on the internet.
** TODO Fix auctex issues
** TODO Understand about blogging with github.io pages
** TODO include calendar piping and understand calendar scheduling. :calendar:
   SCHEDULED: <2019-05-30 gio>

** TODO Check at company-iron c++ and company-pyhton jedi integration.
** TODO Integrate tramp 
** TODO Check at magit. Seems to be a very nice feature for git integration within emacs.
** TODO Watch again Howard Abraham Emacs config. 

   There are very very nice tricks to be implemented there such as the
   wrapper functionalities to insert parentheses quotes etc. of all
   kind across words and section.
** TODO Google translate

   Check at google translate package on MELPA. Sounds interesting for my case.


* Test mode


Here I put changes that I am currently trying and not sure to keep on
the long run. 

** TODO Consider Separate Folder
  
 for managing packages in "test mode"

* Deal with conflicting key bindings

This is an interesting option to deal with key bindings conflicts. The
idea is to create a minor mode with the key bindings you want to have
guaranteed and subsequently solving the conflicts by enabling the
created minor mode.

Notice at the moment not used. But I had to rename already a few key
bindings. I am sure that soon I will have to leverage it and it is
therefore sensible to keep it here already.

#+BEGIN_SRC emacs-lisp
  ;; (defvar my-keys-minor-mode-map
  ;;   (let ((map (make-sparse-keymap)))
  ;;     (define-key map (kbd "C-i") 'some-function)
  ;;     map)
  ;;   "my-keys-minor-mode keymap.")

  ;; (define-minor-mode my-keys-minor-mode
  ;;   "A minor mode so that my key settings override annoying major modes."
  ;;   :init-value t
  ;;   :lighter " my-keys")

  ;; (my-keys-minor-mode 1)
#+END_SRC



