* Index
  
- [[*Notes and General Commands][Notes and General Commands]]
- [[*Profiling Emacs at Start up][Profiling Emacs at Start up]]
- [[*Windows Specific Settings][Windows Specific Settings]]
- [[*Set up environment Variables on Windows][Set up environment Variables on Windows]]
- [[*Increase cache allowed and avoid garbage collection at start up][Increase cache allowed and avoid garbage collection at start up]]
- [[*Shortcut to Configuration File][Shortcut to Configuration File]]
- [[*Git configuration][Git configuration]]
- [[*SSH Configuration][SSH Configuration]]
- [[*Enable MELPA package manager][Enable MELPA package manager]]
- [[*Enable Marmalade and Org ELPA package manager][Enable Marmalade and Org ELPA package manager]]
- [[*Ensure Use-package][Ensure Use-package]]
- [[*Quelpa][Quelpa]]
- [[*EmacsMirror][EmacsMirror]]
- [[*Make sure you can use standard lisp functions and macros][Make sure you can use standard lisp functions and macros]]
- [[*Basic Customization][Basic Customization]]
- [[*Elmacro][Elmacro]]
- [[*Swiper for incremental search][Swiper for incremental search]]
- [[*Auto completion of words][Auto completion of words]]
- [[*Redirect Back up files into a single file][Redirect Back up files into a single file]]
- [[*Set Ispell Dictionary][Set Ispell Dictionary]]
- [[*Flycheck][Flycheck]]
- [[*Latex][Latex]]
- [[*Snippets][Snippets]]
- [[*Org Mode][Org Mode]]
- [[*Functions for Blog][Functions for Blog]]
- [[*Time management and Pomodoro Technique][Time management and Pomodoro Technique]]
- [[*Tramp][Tramp]]
- [[*Git][Git]]
- [[*Quickrun][Quickrun]]
- [[*R][R]]
- [[*Python][Python]]
- [[*Java][Java]]
- [[*Run Code][Run Code]]
- [[*Automatic encryption][Automatic encryption]]
- [[*Deal with conflicting key bindings][Deal with conflicting key bindings]]
- [[*EIN][EIN]]
- [[*Nikola][Nikola]]
- [[*Magit][Magit]]
- [[*Projectile][Projectile]]
- [[*Language Server][Language Server]]
- [[*OUTDATED - Language Server][OUTDATED - Language Server]]
- [[*Which key][Which key]]
- [[*YAML][YAML]]
- [[*Json][Json]]
- [[*XML][XML]]
- [[*Inline online images][Inline online images]]
- [[*Quelpa - Dired-Plus Example][Quelpa - Dired-Plus Example]]
- [[*Add Ripgrep][Add Ripgrep]]
- [[*Add to execution Path and $PATH][Add to execution Path and $PATH]]
- [[*Shell Configs][Shell Configs]]
- [[*Select theme at start up][Select theme at start up]]
- [[*Test-Mode][Test-Mode]]


* Notes and General Commands

Note that this is an experimentation integrating WSL on window emacs.

In general there are too many conflicts. The major ones discovered to
the point are the issues with "sudo orders". These cannot be properly
integrated in this WSL-Windows Emacs. Moreover this solution does not
manage to integrate properly git. Git repositories are not recognized
as such and difficulties arise when pulling and pushing.

Note however that when installing emacs on the Ubuntu partition and
calling emacs in that partition everything integrates well.

This is therefore a very nice and powerful feature and it suggest to
switch to this solution.

Note that in financial institutions this is not a viable option. There
you are blocked by WSL considerations. You can as well simply download
the binary of the file.

** Reload this configuration file

Instead of closing and opening emacs back and forth when editing this
file configuration; you can simply reload the file using:

~M-x eval-buffer~

** Join/merge all the lines

   This is useful to counter the automatic indent in some cases. There
   is a function for this =join-line=

** Insert Image Directly

Use =C-u C-c C-l= to navigate directories and insert directly the
desired image.

** Replace Regex

 To replace all the text between =<<text>>= you can use:

 =M-x replace regex= and enter the following regular expression:

 =<<\(.*\)>>=

 For instance this replace the regular expression  =<< anything >>=.

 For testing your regular expression you might refer to [[https://www.debuggex.com/?flavor=python][this website]].

** Poor Performance

   Sometimes it might happen that emacs displays a poor performance
   and you are not satisfied with it. It recently happened to me on a
   very large org file with many closed org bullets. 

   In that case navigating through the file and skipping many lines
   was awfully slow. The solution in such case is to start an profile
   mode with =M-x profiler-start= do some operations, terminate the
   profiler =M-x profiler-stop= and finally by inspecting its results
   =M-x profiler-report=.

   It turned out that in that specific case the bottleneck was in the
   linum mode, that was taking an awful amount of time to recompute
   the lines displayed at every cursor change. Entering deeper in the
   org leafs the performance did in fact increase and stopping linum
   mode for the file was indeed the solution.

** On the mac install the trash-cli

Nice feature to be used instead of =rm=. You can read of it at the
[[https://github.com/andreafrancia/trash-cli][following page]].

** Save reference to other file

    The syntax is the following

    #+begin_example
    [[/path/to/file.php::line][string-to-display]]
    #+end_example

** References

   These are good fellows you can check from time to time what they
   are doing:

   - [[https://www.ict4g.net/adolfo/notes/emacs/emacs-caldav.html][fellow1]]

   - [[https://develop.spacemacs.org/layers/+emacs/org/README.html][good for org stories]]

   - [[https://systemcrafters.cc/videos][omg these guys are absurd. they really managed emacs to crazy levels]]


As a general resources for generating my emacs configuration I mainly
refer to [[https://cestlaz.github.io/tags/emacs/page/6/][emacs_intro_&packages]], [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz emacs config]]. Harry
Schwartz shared a video on the internet containing a good introduction
to the org mode and suggested the option of writing the emacs
configuration file as =org= file as I am currently doing, which I
enjoy a lot and believe it gives a great overview over the document.

Another nice guy to follow is [[https://alhassy.github.io/init/][this one]].

** For debugging

   You can use =toggle-debug-on-error= to see the backtrace and where
   your emacs functions fails.

   You can watch [[https://www.youtube.com/watch?v=odkYXXYOxpo][this crash course]].

** Checking variables etc in your emacs

   Sometimes you will have to check at the configuration of your
   vairables in your variables in your emacs environment.

   That is important to understand what is going on and troubleshoot
   issues.

   One of the best ways of doing that is via the =C-h v= command.

   You will get an interactive search of all of the existing variables
   and you can work through it. 


* Profiling Emacs at Start up

  So far I never had particular issues with the boot time of my
  emacs. Now That I switched to a windows OS I do.

  I discovered this package in order to profile my initialization file
  and check what actually causes so much time in initializing my
  emacs.
  
  #+begin_src emacs-lisp 
;(use-package esup
;  :ensure t)
  #+end_src 

  #+RESULTS:

  Once it is downloaded you can simply run =M-x esup= and you will be
  displayed the profiling information. There is no need to bootstrap
  the entire system.

  
* Windows Specific Settings

  make PC keyboard's menu app or other to type Super or Hyper, for
  emacs running on Windows.

  #+begin_src emacs-lisp 
(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'super) ; Menu/App key
  #+end_src 

  #+RESULTS:
  : super

  That is good. Like this you ultimately have your super key and do
  not have to change the config.

  
** On GNU software

   So I discovered I was using a lot of GNU software in my previous
   experience under the hood.

   So on windows you can get most of it via - [[https://www.cygwin.com/][cygwin]]. 

** DONE On dead slow performance in windows.
   CLOSED: [2021-12-16 Do. 13:49]

   I am still trying to set it up correctly. Due to some annoying
   issues the performance on windows is dead slow. I will try to
   implement such of the methods mentioned here to see if that
   problems fade away. 

   A particularly helpful tip can be the one of setting recentf off. I
   am seeing this a lot around and I never encountered it on my unix
   systems so I think that this might be in fact a performance killer
   as it tracks every file in the background or something like that.

   #+begin_src emacs-lisp 
(setq recentf-auto-cleanup 'never)
   #+end_src 

   #+RESULTS:
   : never

   #+begin_src emacs-lisp 
;; another low level trick
(setq w32-get-true-file-attributes nil)
   #+end_src 

   #+RESULTS:

   --------------------------

   Update: the dead slow performance was highly related to the crappy
   laptop I was given at first.

   Now on the new laptop emacs works fine so that was not the issue.
   

* Set up environment Variables on Windows

  Consider if you want to rewrite here or in another file apposidly
  created all of the user variables you manually created on your
  windows machine.

  In this sense if you will transition to another laptop all of the
  variables will already be properly set up.

  Mask them and do not keep your path exposed here. Rather reference
  another file.
  
** TODO configure environment variables.
   SCHEDULED: <2021-12-21 Di. 09:00>
   

* Increase cache allowed and avoid garbage collection at start up

#+BEGIN_SRC emacs-lisp
;; Avoid garbage collection at statup

(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
	  (lambda ()
	    (setq gc-cons-threshold 300000000 ; 300mb	
			  gc-cons-percentage 0.1)))
#+END_SRC

#+RESULTS:
: 200000000

Another interesting trick is to compile byte code. This will make the
code run faster.

You can do that by following the four instructions should you be
interested.

#+begin_example
- Start Emacs.
- Type [Alt]-x.
- When prompted for a command, enter byte-force-recompile [Enter].
- When prompted for a directory name, change the path to your =.el=
  files press [Enter].
#+end_example

The end result should be an .elc file for most of the =.el= files (not
all of the files will be compiled, so don't worry if some are
missing).


* Shortcut to Configuration File

This section creates a shortcut key to go to this =emacs=
configuration file without having to search for the directory.
#+BEGIN_SRC emacs-lisp
    (defun hrs/visit-emacs-config ()
      (interactive)
      (find-file "C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/emacs_config/emacs_configuration.org"))

    (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)

#+END_SRC

#+RESULTS:
: hrs/visit-emacs-config


* Git configuration

  #+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "C:/Dev/git/bin")
  #+END_SRC

   
* SSH Configuration

  Note that you can create a folder with your different ssh keys in windows.

  Follow [[https://stackoverflow.com/questions/26266778/ssh-config-file-for-windows-git][this url]] explaination to do that.

  I don't understand if you have to create a =.ssh= directory or what.

  Try to do that and see how it is working.

  
* Enable MELPA package manager

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		      (not (gnutls-available-p))))
	 (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

#+RESULTS:


* Enable Marmalade and Org ELPA package manager

Org ELPA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((gnu . https://elpa.gnu.org/packages/) (melpa-stable . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))

Marmalade
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("marmalade" .  "http://marmalade-repo.org/packages/"))
#+END_SRC

#+RESULTS:
: ((marmalade . http://marmalade-repo.org/packages/) (gnu . https://elpa.gnu.org/packages/) (melpa-stable . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))




* Ensure Use-package

This package assure that you do not have to download all of the
packages manually and it downloads all of the necessary packages
automatically and open them with the predefined configuration options.

Notice that you have downloaded ~(package-install)~ to your =.emacs=.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t


* Quelpa

Quelpa download

 #+begin_src emacs-lisp 
 (unless (package-installed-p 'quelpa)
     (with-temp-buffer
       (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
       (eval-buffer)
       (quelpa-self-upgrade)))
 #+end_src 

 #+RESULTS:

 Use-package 
 #+begin_src emacs-lisp 
 (unless (package-installed-p 'quelpa-use-package)
   (quelpa
    '(quelpa-use-package
      :fetcher git
      :url "https://github.com/quelpa/quelpa-use-package.git"))
 )
 #+end_src 

 #+RESULTS:

 #+begin_src emacs-lisp 
 (require 'quelpa-use-package)
 #+end_src 

 #+RESULTS:
 : quelpa-use-package

Recall that you can find the packages available in the emacsmirror by
using =epkg-list-packages= function.


* EmacsMirror

  Use epkg to check the available packages on emacsmirror

#+begin_src emacs-lisp 
;; first download the epkg
;;  git clone git@github.com:emacsmirror/epkgs.git ~/.emacs.d/epkgs

(use-package epkg
  :ensure t)
#+end_src 

#+RESULTS:
     
** TODO have some issues when running SQLlite needed for it.

   again require some software which is blocked by the org. think
   about ways to mange it.

   there is an open issue for it. you can read about it [[https://github.com/org-roam/org-roam/issues/397][here]].


* Make sure you can use standard lisp functions and macros

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC

#+RESULTS:
: cl

* Basic Customization
  
** Mode Line


 Important for doom-modeline is to have =all the icons= installed and
 to run =M-x all-the-icons-install-fonts= one time.

 Note that for Windows [[https://www.hackercitizen.com/emacs-for-windows-10-install-all-the-icons/][this manual process]] will also be necessary.

 #+begin_src emacs-lisp 
 (use-package doom-modeline
   :ensure t
   :init
   (doom-modeline-mode 1))
 #+end_src 

 #+RESULTS:

 #+begin_src emacs-lisp 
 ;; How tall the mode-line should be. It's only respected in GUI.
 ;; If the actual char height is larger, it respects the actual height.
 (setq doom-modeline-height 1)
 ;; How wide the mode-line bar should be. It's only respected in GUI.
 (setq doom-modeline-bar-width 3)

 (setq doom-modeline-lsp t)
 (setq doom-modeline-project-detection 'project)
 #+end_src 

 #+RESULTS:
 : project

 #+begin_src emacs-lisp 
 (use-package powerline
   :ensure t)
 #+end_src 

 #+RESULTS:


** Image size

Imagemagick is missing.

#+begin_src emacs-lisp 
(setq org-image-actual-width nil)
#+end_src 

#+RESULTS:

  The following does the following:

    => if there is a #+ATTR.*: width="200", resize to 200,
     otherwise resize to 600; this was chosen as it is a good display
     on my screen.

  #+begin_src emacs-lisp 
  (setq org-image-actual-width '(600))

;; (setq org-image-actual-width (/ (display-pixel-width) 3))
  #+end_src 

  #+RESULTS:
  | 600 |

** Define shortcuts for particular characters

#+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook
	       (lambda () (global-set-key (kbd "M-ü") "~")))
#+END_SRC

#+RESULTS:
| (lambda nil (global-set-key (kbd M-ü) ~)) | color-highlight | (lambda nil (global-set-key (kbd M-ì) ~)) | w32-check-shell-configuration | tramp-register-archive-file-name-handler | table--make-cell-map |

#+begin_src emacs-lisp 
     (add-hook 'after-init-hook
	       (lambda () (global-set-key (kbd "C-M-<") "\\")))
#+END_SRC

#+RESULTS:
| (lambda nil (global-set-key (kbd C-M-<) \)) | color-highlight | (lambda nil (global-set-key (kbd M-Ã¼) ~)) | w32-check-shell-configuration | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

** Set global encoding 

#+BEGIN_SRC emacs-lisp
;; UTF-8 as default encoding
(set-language-environment "utf-8")
(prefer-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC

#+RESULTS:
: utf-8

** No beeps, scrollbar etc.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)             ;; Get rid of the beeps

(when (window-system)
  (tool-bar-mode 0)               ;; Toolbars were only cool with XEmacs
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (scroll-bar-mode -1))            ;; Scrollbars are waste screen estate
#+END_SRC

#+RESULTS:

** Highlight color

   Set highlight color when activate the "mark set" to be a different
   color than gray as it is poorly recognizable with the theme and the
   line highlighting mode.

#+BEGIN_SRC emacs-lisp
      (defun color-highlight ()
	(interactive)
	(set-face-attribute 'region nil :background "indian red" :foreground "grey5"))
#+END_SRC
#+RESULTS:
: color-highlight

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'color-highlight) ;; to actiavte it when starting emacs.
#+END_SRC

#+RESULTS:
| color-highlight | (lambda nil (global-set-key (kbd M-\303\254) ~)) | w32-check-shell-configuration | tramp-register-archive-file-name-handler | table--make-cell-map |

Create general function to set transparency.
#+BEGIN_SRC emacs-lisp
 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

#+RESULTS:
: transparency

** Two very handy tricks from Howard Abraham

   - Replace yes-no answers with y-n. 

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

   - Fix the scrolling =C-v= and =M-v= such that the cursor will
     return to the previous scrolling position if going down and up.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
          scroll-preserve-screen-position t)
   #+END_SRC

   #+RESULTS:
   : t

** Undo Redo Tree 
   
   This is a very nice package that allows you to expand on the basics
   emacs undo functionalities. In emacs you can undo with =C-_= or
   =C-/=.

   The package undo-tre allows you to have the redo option with
   =C-?=.

   Moreover it allows you to visualize a tree with the changes you
   have done and to move interactively across it to go back to a given
   point in you history. 

   If you code something and then cancel that something and code
   something else, the undo tree will show a branch at this stage
   with the two versions of your edit.

   Require the package and enable it globally.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+END_SRC

   #+RESULTS:

** Parenthesis

   Try this package for parenthesis highlighting. 

   Learn how to quickly operate with parenthesis using predit through
   the following link [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][predit-tutorial.]]

   #+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC emacs-lisp
   (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
   #+END_SRC

   #+RESULTS:
   : enable-paredit-mode

   Despite being super useful paredit unfortunately conflicts with the
   usual <DEL>. This will not allow to cancel entire chunks of
   highlighted text. Set another key binding for paredit delete.

   Notice the code below removes the paredit delete altogether because
   I do not find it that useful. Another option would just to add
   another line shifting the paredit =<DEL>= to some other key binding. 

#+BEGIN_SRC emacs-lisp
  (eval-after-load "paredit" '(define-key paredit-mode-map (kbd "<DEL>") nil))

  (add-hook 'org-mode-hook 'enable-paredit-mode) ;; notice at the moment paredit is just bound to org-mode. Expand it.
#+END_SRC

#+RESULTS:
| enable-paredit-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


Rainbow-delimiters is convenient for coloring matching parentheses.

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters) 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode) ;; to enable it in all programming-related modes
   #+END_SRC

   #+RESULTS:
   | rainbow-delimiters-mode |

** Kill current buffer and close its window

#+BEGIN_SRC emacs-lisp
    ;; Always kill current buffer with "C-x k"
    (defun bjm/kill-this-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer))
      (delete-window))

    (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+END_SRC

#+RESULTS:
: bjm/kill-this-buffer

In case you want to select as standard which buffer to kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC

#+RESULTS:
: kill-buffer

** Save cursor current position when killing the file

   Using save-place-mode saves the location of point for every file I
   visit. If I close the file or close the editor, then later re-open
   it, point will be at the last place I visited.

#+BEGIN_SRC emacs-lisp
    (save-place-mode t)
#+END_SRC

#+RESULTS:
: t

** Highlight current line

#+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)
#+END_SRC

#+RESULTS:
: t

** Inhibit start up messages

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t);; this will hide the initial tutorial
#+END_SRC

#+RESULTS:
: t

*** Remove Other start up buffers

#+BEGIN_SRC emacs-lisp
    ;; Makes *scratch* empty.
    (setq initial-scratch-message "")

    ;; Removes *scratch* from buffer after the mode has been set.
    (defun remove-scratch-buffer ()
      (if (get-buffer "*scratch*")
	  (kill-buffer "*scratch*")))
    (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+END_SRC

#+RESULTS:
| remove-scratch-buffer | global-undo-tree-mode-enable-in-buffers | doom-modeline-update-buffer-file-icon | ess-r-package-auto-activate | ein:ac-setup-maybe | ein:header-line-setup-maybe | polymode-after-change-major-mode-cleanup | global-eldoc-mode-enable-in-buffers | global-font-lock-mode-enable-in-buffers |

Uncomment the next buffer if you want to inhibit start up messages and
kill the buffer. 

#+BEGIN_SRC emacs-lisp
    ;; Removes *messages* from the buffer.
    ;;(setq-default message-log-max nil)
    ;;(kill-buffer "*Messages*")
#+END_SRC

#+RESULTS:

** Theme

*Reminder:* Check the face you are for adapting the colors by using
/C-u C-x =/ this is binded to =describe-faces=.

*Reminder:* Notice also that particularly interesting is the option to
run =M-x customize face=. There you can enter the face you aim to
customize, for instance the =org-level-1= variable. With enter you can
then see the autocompletion for the for the entered words.

You can then check  if there is any annoying default value or so.
You can moreover edit this directly in the tab making such boring
configurations quick.

*Important:* It is also possible to leverage the =M-x
list-faces-display= that shows all the faces use in your emacs session
and you can then correspondingly search there fore the face you are
interested into modify.

*** Configurations for all themes


    Notice this first is necessary in order to allow your modifications to the themes colours

#+begin_src emacs-lisp 
(setq custom--inhibit-theme-enable nil)
#+end_src 

#+RESULTS:

    Notice that below is some general modification.
    
#+begin_src emacs-lisp 
 (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  ;; '(alect-title ((t (:foreground "#077707" :weight bold :height 2.0))))
;;  '(bold ((t (:weight bold))))
  '(cursor ((t (:background "white" :foreground "white" :inverse-video t))))
;;  '(flyspell-duplicate ((t (:background "gray16" :foreground "khaki3" :underline (:color foreground-color :style wave)))))
;;  '(flyspell-incorrect ((t (:foreground "#d81212" :underline (:color "#F92672" :style wave)))))
;;  '(magit-section-highlight ((t (:background nil))))
;;  '(magit-section-heading ((t (:inherit nil :box (:line-width 2 :color "black" :style released-button) :weight bold :height 1.5))))
;;  '(org-agenda-structure((t (:background nil :foreground nil))))
;;  '(org-agenda-date ((t (:inherit nil :background nil :foreground nil :inverse-video nil :box (:line-width 2 :color "#272822") :overline nil :slant normal :weight normal :height 1.0))))
;;  '(org-agenda-date-today ((t (:inherit org-agenda-date :background nil :foreground nil :inverse-video nil  :overline nil :weight bold))))
;;  '(org-agenda-date-weekend ((t (:foreground nil :inverse-video nil :overline nil :underline nil))))
;;  '(org-document-title ((t (:inherit alect-title :foreground "#F8F8F0" :weight bold :height 0.7))))
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
  '(org-level-4 ((t (:inherit outline-4 :height 0.85))))
;;  '(org-meta-line ((t (:background nil :inherit nil)))))
 )
#+end_src 

#+RESULTS:

*** Doom Theme

#+begin_src emacs-lisp 
  (defun dark/doom ()
    (interactive)
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-peacock t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      ;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      ;; (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)
      )
  )
#+end_src 

#+RESULTS:
: dark/doom

*** Load Monokai theme as standard theme
    
#+begin_src emacs-lisp 
(defun dark/monokai ()
  (interactive)
  (use-package monokai-theme
    :ensure t)

  (load-theme 'monokai t) ;; load the black monokai theme

  (with-eval-after-load "monokai-theme"
    (custom-theme-set-faces
     'monokai
     '(default ((t)))
     '(org-block-begin-line
       ((t (:background:"#35331D" :foreground "#75715E" ))))
     '(org-block
       ((t (:background "#3E3D31" :foreground "#F8F8F0"))))  
     '(org-block-end-line
       ((t (:background:"#35331D" :foreground "#75715E" ))))
     '(font-lock-builtin-face
       ((t :foreground "cornflower blue"))) ;; this is the foreground for instance

     ;; Change color of the org headers
     '(org-level-1 ((t (:foreground "spring green" :inherit nil))))
     '(org-level-2 ((t (:foreground "light blue" :inherit nil))))
     '(org-level-3 ((t (:foreground "indian red" :inherit nil))))

     ;; font shell
     '(font-lock-face
       ((t (:foreground "white" :inherit nil :background nil))))

     '(term
       ((t (:foreground "white" :inherit nil :background nil))))
     )
  )
)
#+end_src 

#+RESULTS:
: dark/monokai

    Change line highlighting color for monokai. At the moment I could not
    find a nice option. But it annoys me that in org chunck it becomes
    almost indistinguishable. Maybe one day you will find the right
    color...
    
#+BEGIN_SRC emacs-lisp
      ;; (set-face-background 'hl-line "rosy brown")

      ;; ;To keep syntax highlighting in the current line:

      ;; (set-face-foreground 'highlight nil)
#+END_SRC

#+RESULTS:

*** Use light theme for bright light

    Define function for customizing light theme with the colors you
    want. 

    Define global function that you can call to get the brighter theme.

    #+BEGIN_SRC emacs-lisp
    (defun bright/light ()
      (interactive)
      (use-package alect-themes
	:ensure t)

      (load-theme 'alect-light t) 

       (with-eval-after-load  "alect-light-theme"
	 (custom-theme-set-faces
	  'alect-light
	  ;;'(default ((t)))
	  ;; Change the color of the org chunks.
	  '(org-block-begin-line
	    ((t (:underline "#A7A6AA" :foreground "#008ED1" :background nil))))
	  '(org-block
	    ((t (:background "snow3" :inherit nil))))  
	  '(org-block-end-line
	    ((t (:overline "#A7A6AA" :foreground "#008ED1" :background nil))))
	  '(org-quote
	    ((t (:background "snow3" :inherit nil))))
	  '(org-meta-line
	    ((t (:inherit nil))))

	  ;; Change color of the org headers
	  '(org-level-1 ((t (:foreground "indian red" :inherit nil))))
	  '(org-level-2 ((t (:foreground "#008ED1"))))
	  '(org-level-3 ((t (:foreground "sea green"))))
	  '(org-level-4 ((t (:foreground "salmon3"))))
	  '(org-level-5 ((t (:foreground "#9370db"))))
	  '(org-level-6 ((t (:foreground "#b8860b"))))	  

	  ;; Change color of org references
	  '(org-ref-cite-face
	    ((t (:foreground "#008ED1" :inherit nil))))

	  ;; Change color of properties tags
	  '(org-drawer
	    ((t (:foreground "salmon3" :inherit nil))))

	  ;; Change color of org date
	  '(org-date
	    ((t (:foreground "dark cyan" :inherit nil))))

	  ;; magit text for committing
	  '(git-commit-summary
	    ((t (:foreground "black" :inherit nil))))

	  ;; Specify the colors of strings etc...
	  '(font-lock-comment-face ((t :foreground "SeaGreen4"))) 
	  '(font-lock-builtin-face  ((t :foreground "blue"))) ;; this is the foreground for instance
	  '(font-lock-string-face  ((t :foreground "indian red"))) ;; this is the commentary and strings. Use it for custom set faces when you know it.
          '(font-lock-face       (:foreground "black" :background nil))
	  ;; Change color of ein input cells
	  '(ein:cell-input-area
	    ((t (:background "snow3" :inherit nil))))

	  ;; Change color of dired - i.e. of files appearing to the left
	  '(diredp-file-name
	    ((t (:foreground "indian red" :inherit nil))))
	  '(diredp-dir-name
	    ((t (:foreground "blue" :inherit nil))))

	  ;; markdown face for lsp server
	  ;; Change color of ein input cells
	  '(markdown-code-face
	    ((t (:background nil :inherit nil))))

	  ;; Flyspell duplicate - mild error
	  '(flyspell-duplicate
	    ((t (:background nil :inherit nil :foreground "DarkOrange2"))))

	  ;; Chnage color of global lining
	  '(linum
	    ((t (:background "light grey" :inherit nil))))

	  ;; Change the color in the minibuffer prompt to read better
	  '(minibuffer-prompt
	    ((t (:background "white" :inherit nil :foreground "indian red"))))

	  ;; Change the color in the minibuffer prompt to read better
	  '(alect-block
	    ((t (:background nil :inherit nil))))

	  ;; Org link
	  '(org-link
	    ((t (:foreground "blue" :inherit nil))))

	  ;; Org-block
	  '(org-block
	    ((t (:foreground "light-grey" :background "grey78" :inherit nil))))

	  ;; Shell Prompt
	  '(term
	    ((t (:foreground "black" :inherit nil))))
	  '(comint-highlight-prompt 
	    ((t (:foreground "#008ED1"))))
	  
	  ;; Dired
	  '(dired-directory
	    ((t (:foreground "blue"))))
	  '(diredp-file-suffix
	    ((t (:foreground "black"))))


	  ;; for python indents
	  '(highlight-indentation-face
	    ((t (:background "grey85"))))

	  ;; css property
	  '(css-property
	    ((t (:foreground "dark green"))))

	  ;; magit
	  '(magit-diff-file-heading
	    ((t (:foreground "sea green"))))
	  '(magit-filename
	    ((t (:foreground "indian red"))))

	  ;; markdown
	  '(markdown-pre-face 
	    ((t (:foreground "indian red"))))
	  )
	 )
      )
    #+END_SRC

    #+RESULTS:
    : bright/light

*** Misterioso

#+begin_src emacs-lisp 
(defun dark/misterioso ()
  (interactive)
  (load-theme 'misterioso)
  ;; (with-eval-after-load "misterioso-theme"
  ;;   (custom-theme-set-faces
  ;;    'misterioso
  ;;    '(default ((t)))
  ;;    (set-face-background 'linum "#2d3743")
  ;;    (set-face-background 'hl-line "#212931")
  ;;    '(org-block
  ;;      ((t (:background "#3E3D31" :foreground "#F8F8F0"))))
  ;;    '(ivy-subdir
  ;;      ((t (:foreground "#ffad29" ))))
  ;;  )
  ;; )
)
#+end_src 

#+RESULTS:
: dark/misterioso

#+begin_src emacs-lisp 
 ;; there is a weird behaviour with the org-agenda. 
 ;; consider incorportaing such changes.
 
 ;; '(org-agenda-date ((t (:background nil :foreground nil :inverse-video nil :box (:line-width 2 :color nil) :overline nil :slant normal :weight normal :height 1.0))))
 ;; '(org-agenda-date-today ((t (:inherit org-agenda-date :foreground nil :background nil)))) 
 ;; '(org-agenda-date-weekend ((t (:inherit org-agenda-date :foreground nil  :background nil))))
#+end_src 

#+RESULTS:

*** Make them available as classes

#+begin_src emacs-lisp 
(defvar a 3 "Initial setting for the `a` global variable.")
#+end_src 

#+RESULTS:
: a

 #+begin_src emacs-lisp 
(defun my-switch ()
"Doc-string for `my-switch` function."
(interactive)
  (cond
    ((= a 1)
      (call-interactively 'dark/monokai)
      (message "set monokai")
      (setq a 2))
    ((= a 2)
      (call-interactively 'dark/doom)
      (message "set doom")
      (setq a 3))
    ((= a 3)
      (call-interactively 'dark/misterioso)
      (message "set misterioso")
      (setq a 4)) 
    ((= a 4)
      (call-interactively 'bright/light)
      (message "set bright-light")
      (setq a 1))) )
#+end_src 

#+RESULTS:
: my-switch

#+begin_src emacs-lisp 
(global-set-key (kbd "C-s-b") 'my-switch)
#+end_src 

#+RESULTS:
: my-switch

** Set lining globally

   #+BEGIN_SRC emacs-lisp
(global-linum-mode t) ;; load line number at the beginning of the
		      ;; file. Notice the global argument means that
		      ;; this line configuration will apply to all
		      ;; buffers in emacs. You can also enable things
		      ;; per mode - e.g., python-mode, markdown-mode,
		      ;; text-mode.
      
#+END_SRC

#+RESULTS:
: t

** Moving across windows

#+BEGIN_SRC emacs-lisp
(defun ace/window ()
  (interactive)
  (use-package ace-window
     :ensure t
     :init
     (progn
       (global-set-key (kbd "C-x s-o") 'ace-window)
       (custom-set-faces
	'(aw-leading-char-face
	  ((t (:inherit ace-jump-face-foreground :height 3.0)))))
       ))
)

(ace/window)
#+END_SRC

#+RESULTS:

To move across windows holding the shift key

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Make windmove work in Org mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

#+RESULTS:
| windmove-right |

** Highlight comments for improved visualization of important stuff

This gives the option to delete comments or to mark them in red and
green.

Below there is just the definition of the function. You should add a
hook in each programming mode to make sure the comment visualization
is working correctly.

#+BEGIN_SRC emacs-lisp
(make-face 'font-lock-comment-important)
(set-face-foreground 'font-lock-comment-important "#00ff00")

(make-face 'font-lock-comment-todo)
(set-face-foreground 'font-lock-comment-todo "#ff0000")

(make-face 'font-lock-comment-strike)
(set-face-attribute 'font-lock-comment-strike
nil :strike-through t)

(defun add-custom-keyw()
"adds a few special keywords"
(font-lock-add-keywords
nil
'(("commentStrike \\(.+\\)" 1 'font-lock-comment-strike prepend)
  ("commentRed \\(.+\\)" 1 'font-lock-comment-todo prepend)
  ("commentGreen \\(.+\\)" 1 'font-lock-comment-important prepend)
)
))
#+END_SRC

#+RESULTS:
: add-custom-keyw

Example of adding the hook

#+Name: Add comments highlighting for python mode.
#+BEGIN_SRC emacs-lisp
;;(add-hook 'python-mode-hook 'add-custom-keyw)
#+END_SRC

#+RESULTS: Add comments highlighting for python mode.

** Expand region

   This package allows you to expand the highlighting from inside to
   outside. That is from the inner most layer to the layers above. For
   instance if you are into a parenthesis it will allow you to expand
   from letter to word, to the entire parenthesis, function, etc.

#+BEGIN_SRC emacs-lisp
  ;; (use-package expand-region
  ;;   :ensure t 
  ;;   :config
  ;;   (global-set-key (kbd "C-*") 'er/expand-region)
  ;; )
#+END_SRC

#+RESULTS:

New version of expand region. Try it and see which one you like better

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (defun ha/expand-region (lines)
    "Prefix-oriented wrapper around Magnar's `er/expand-region'.

Call with LINES equal to 1 (given no prefix), it expands the
region as normal.  When LINES given a positive number, selects
the current line and number of lines specified.  When LINES is a
negative number, selects the current line and the previous lines
specified.  Select the current line if the LINES prefix is zero."
    (interactive "p")
    (cond ((= lines 1)   (er/expand-region 1))
          ((< lines 0)   (ha/expand-previous-line-as-region lines))
          (t             (ha/expand-next-line-as-region (1+ lines)))))

  (defun ha/expand-next-line-as-region (lines)
    (message "lines = %d" lines)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line lines))

  (defun ha/expand-previous-line-as-region (lines)
    (end-of-line)
    (set-mark (point))
    (beginning-of-line (1+ lines)))

  :bind ("C-*" . ha/expand-region))
#+END_SRC

#+RESULTS:
: ha/expand-region

** Autofill Mode

Goes to next line on the next space when the line becomes too wide.

#+BEGIN_SRC emacs-lisp
;;  (setq-default auto-fill-function 'do-auto-fill)

   (add-hook 'org-mode-hook 'turn-on-auto-fill)

;;  go to next line but in a horrible way at this stage. try to fix
;;  the issue.
#+END_SRC

#+RESULTS:
| turn-on-auto-fill | enable-paredit-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


To set the width of the column for which the entry must go to the new
line, check at the following [[https://www.emacswiki.org/emacs/FillParagraph][page]].

** Beacon Mode

   This emits a short light when the you move your cursor around the
   screen in a fast way. That should help you to quickly identify
   where your cursor is and not to get lost when quickly scrolling on
   the screen.

   You can set in the parameter for deciding when the beacon should
   work. Moreover, you define how long the light should flash. For
   this and several other options check at the github repo [[https://github.com/Malabarba/beacon][beacon]].

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t 
    :config
    (beacon-mode 1)
    (setq beacon-color "#50D050") ;; a light green
   )
#+END_SRC

#+RESULTS:
: t

   Work nicely. Seems to slow emacs though. Try to observe on the long
   run if it slows it sensibly and remove it if this is the case. 

** Unfill paragraph

   Might be good. For instance for canceling all of the paragraph quickly or for commenting it away.

   #+BEGIN_SRC emacs-lisp
   (defun unfill-paragraph ()
      "Convert a multi-line paragraph into a single line of text."
      (interactive)
      (let ((fill-column (point-max)))
        (fill-paragraph nil)))

    ;; Handy key definition
    (define-key global-map "\M-Q" 'unfill-paragraph)
   #+END_SRC

   #+RESULTS:
   : unfill-paragraph

** Aggressive Indent

   Automatically indents all of your code. 

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
  :ensure t)

  (global-aggressive-indent-mode)
#+END_SRC

#+RESULTS:
: t

** Set Default Size for all Buffers

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 180)
#+END_SRC

#+RESULTS:

** Sidebar

Check at the configuration on [[https://github.com/jojojames/dired-sidebar/issues/26][this thread]]. There might be still
interesting content there.

*** Sidebar config

 Show the repo structure in a similar way to VScode. Incompact on
 Melpa.

 #+begin_src emacs-lisp 
   ;; (use-package dired-sidebar
   ;;   :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
   ;;   :ensure t
   ;;   :commands (dired-sidebar-toggle-sidebar)
   ;;   :init
   ;;   (add-hook 'dired-sidebar-mode-hook
   ;; 	    (lambda ()
   ;; 	      (unless (file-remote-p default-directory)
   ;; 		(auto-revert-mode))))
   ;;   :config
   ;;   (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
   ;;   (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

   ;;   (setq dired-sidebar-subtree-line-prefix "__")
   ;;   (setq dired-sidebar-theme 'vscode)
   ;;   (setq dired-sidebar-use-term-integration t)
   ;;   (setq dired-sidebar-use-custom-font t))
 #+end_src 

 #+RESULTS:

 Was downloaded through git following the instruction on the [[https://github.com/jojojames/dired-sidebar][github
 repo]] in the meanwhile.

 #+begin_src emacs-lisp 
   (add-to-list 'load-path "C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-sidebar")
   (add-to-list 'load-path "C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-hacks")
 #+end_src  

 #+RESULTS:
 | c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-rst/ | c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-nikola/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/tea-timer.el/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/scimax-ob/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-hacks | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-sidebar | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ag-0.48 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/aggressive-indent-1.10.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-complete-nxml-0.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-complete-1.5.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-yasnippet-0.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/beacon-1.3.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/calfw-1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/calfw-org-1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/counsel-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/doom-modeline-3.2.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/doom-themes-2.1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/all-the-icons-5.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/elpy-1.35.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/company-0.9.13 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/epkg-3.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/closql-1.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/emacsql-sqlite-3.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/emacsql-3.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ess-18.10.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/expand-region-0.11.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flycheck-31 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flymake-json-0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flymake-easy-0.10 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/gnuplot-0.8.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-lsp-0.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-3.8.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-core-3.8.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/highlight-indentation-0.7.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/htmlize-1.56 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-mode-1.8.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-navigator-0.1.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/hierarchy-0.7.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-snatcher-1.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/julia-mode-0.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-java-3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dap-mode-0.7 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/bui-1.2.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-treemacs-0.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-ui-8.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-mode-8.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/magit-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/git-commit-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/magit-section-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/markdown-mode-2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-alert-0.1.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-bullets-0.2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-pomodoro-2.1.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-wild-notifier-0.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dash-functional-2.19.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/async-1.9.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/alert-1.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/log4e-0.3.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/gntp-0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-yt-20180527.245 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/paredit-24 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pkg-info-0.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/epl-0.9 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pomodoro-20210225.2118 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/popup-0.5.8 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/powerline-2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/projectile-2.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pyvenv-1.21 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quelpa-use-package-20201022.946 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quelpa-20210329.839 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quickrun-2.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/rainbow-delimiters-2.1.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/request-0.3.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ripgrep-0.4.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/shell-switcher-1.0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/shrink-path-0.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/f-0.20.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/spinner-1.7.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/swiper-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ivy-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/transient-0.3.7 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/transpose-frame-0.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/treemacs-2.9.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/cfrs-1.5.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/posframe-1.1.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ht-2.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/hydra-0.15.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lv-0.15.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pfuture-1.9 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ace-window-0.10.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/avy-0.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/try-0.0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/undo-tree-0.7.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/use-package-2.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/bind-key-2.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/virtualenvwrapper-0.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/s-1.12.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dash-2.19.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/vscode-icon-20201214.2327 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/which-key-3.5.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/with-editor-3.0.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yafolding-0.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yaml-mode-0.0.15 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yasnippet-0.14.0 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/site-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/site-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/vc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/url | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/textmodes | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/progmodes | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/play | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/org | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/nxml | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/net | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/mh-e | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/mail | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/leim | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/language | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/international | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/image | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/gnus | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/eshell | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/erc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/emulation | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/emacs-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/cedet | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/calendar | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/calc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/obsolete |

 #+begin_src emacs-lisp 
(load "dired-sidebar")
 #+end_src 

 #+RESULTS:
 : t

 Configuration

 #+begin_src emacs-lisp 
(push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
(push 'rotate-windows dired-sidebar-toggle-hidden-commands)

;; (setq dired-sidebar-subtree-line-prefix "__")
;; (setq dired-sidebar-theme 'vscode) -- use it with vscode icons if interested
(setq dired-sidebar-use-term-integration t)
(setq dired-sidebar-use-custom-font t)
(setq dired-sidebar-should-follow-file t)
 #+end_src
 
 #+RESULTS:
 : t


Also change the default sidebar width.

#+begin_src emacs-lisp 
(setq dired-sidebar-width 20)
#+end_src 

#+RESULTS:
: 20

Enlarge dired-sidebar

#+begin_src emacs-lisp 
  (defun enlarge_sidebar()
    "Convert a multi-line paragraph into a single line of text."
    (interactive)
     (dired-sidebar-toggle-sidebar)
     (setq dired-sidebar-width (+ 5 dired-sidebar-width))
     (dired-sidebar-toggle-sidebar)
    )


  (defun shrink_sidebar()
    "Convert a multi-line paragraph into a single line of text."
    (interactive)
     (dired-sidebar-toggle-sidebar)
     (setq dired-sidebar-width (- dired-sidebar-width 5))
     (dired-sidebar-toggle-sidebar)
    )

  (defun default_sidebar()
    "Convert a multi-line paragraph into a single line of text."
    (interactive)
     (dired-sidebar-toggle-sidebar)  
     (setq dired-sidebar-width 20)
     (dired-sidebar-toggle-sidebar)   
    )

  ;; bind the two in dired mode
  (add-hook 'dired-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c <") 'shrink_sidebar)
              (local-set-key (kbd "C-c >") 'enlarge_sidebar)
	    (local-set-key (kbd "C-c C-d") 'default_sidebar))
	  )
#+end_src 

#+RESULTS:
| (lambda nil (local-set-key (kbd C-c <) 'shrink_sidebar) (local-set-key (kbd C-c >) 'enlarge_sidebar) (local-set-key (kbd C-c C-d) 'default_sidebar)) | doom-modeline-set-project-modeline |

 #+begin_src emacs-lisp 
   (global-set-key (kbd "C-x C-n") 'dired-sidebar-toggle-sidebar)
 #+end_src 

 #+RESULTS:
 : dired-sidebar-toggle-sidebar

*** Use all the icons for dired

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :quelpa (shell-switcher :fetcher github :repo "jtbm37/all-the-icons-dired.git")
  :ensure t
  )
#+END_SRC

#+RESULTS:

 #+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

#+RESULTS:
| all-the-icons-dired-mode | (lambda nil (local-set-key (kbd C-c <) 'shrink_sidebar) (local-set-key (kbd C-c >) 'enlarge_sidebar) (local-set-key (kbd C-c C-d) 'default_sidebar)) | doom-modeline-set-project-modeline |


** Buffers

   Switch to most recent visited buffer

   #+begin_src emacs-lisp 
   (global-set-key (kbd "C-c M-<")  'mode-line-other-buffer)
   #+end_src 

   #+RESULTS:
   : mode-line-other-buffer

** Transpose Buffers

 Change the order of the buffers.

 #+begin_src emacs-lisp 
 (defun transpose-buffers (arg)
   "Transpose the buffers shown in two windows."
   (interactive "p")
   (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
     (while (/= arg 0)
       (let ((this-win (window-buffer))
             (next-win (window-buffer (funcall selector))))
         (set-window-buffer (selected-window) next-win)
         (set-window-buffer (funcall selector) this-win)
         (select-window (funcall selector)))
       (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
 #+end_src 

 #+RESULTS:
 : transpose-buffers

** Switch Frames

 Switches the content of the frames in the two monitors.

 #+begin_src emacs-lisp 
 (defun switch-buffers-between-frames ()
   "switch-buffers-between-frames switches the buffers between the two last frames"
   (interactive)
   (let ((this-frame-buffer nil)
	 (other-frame-buffer nil))
     (setq this-frame-buffer (car (frame-parameter nil 'buffer-list)))
     (other-frame 1)
     (setq other-frame-buffer (car (frame-parameter nil 'buffer-list)))
     (switch-to-buffer this-frame-buffer)
     (other-frame 1)
     (switch-to-buffer other-frame-buffer)))
 #+end_src 

 #+RESULTS:
 : switch-buffers-between-frames

** Toggle Split

#+begin_src emacs-lisp 
(use-package transpose-frame
  :ensure t)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(global-set-key (kbd "C-c 0") 'transpose-frame)
#+end_src 

#+RESULTS:
: transpose-frame

** Wrap text in quotes


   #+begin_src emacs-lisp 
   (global-set-key (kbd "M-\"") 'insert-pair)
   #+end_src 

   #+RESULTS:
   : insert-pair

** Always split vertically

#+begin_src emacs-lisp 
(setq split-height-threshold nil)
(setq split-width-threshold 160)
#+end_src 

#+RESULTS:
: 160

** Ibuffer

[[https://emacs.stackexchange.com/questions/2181/ibuffer-how-to-automatically-create-groups-per-project][This link might still be interesting to look at]].

#+begin_src emacs-lisp 
(setq ibuffer-saved-filter-groups
      (quote (("default"

	       ("terminal"  (or
                             (mode . term-mode)
                             (mode . shell-mode)
                             (mode . eshell-mode)
                             ))	       

               ("sidebar" (mode . dired-sidebar-mode))

               ("org" (mode . org-mode))

               ("python" (or
			  (mode . python-mode)
			  (mode . inferior-python-mode)
                          (name . "^\\*ob-ipython.*")
			  ))

               ("ein"    (name . "^\\*ein.*"))

               ("JSON"    (mode . json-mode))

	       ("magit"  (or
                             (mode . magit-mode)
                             (mode . magit-diff-mode)
                             (mode . magit-process-mode)
			     (name . "^magit.*")
                             ))

	       ("tramp"
		       (name . "^\\*tramp.*"))

	       ("LSP" (or
		       (name . "^\\*lsp.*")
		       (name . "^\\*pyls.*")
		       )
		)

	       ("Ediffing" (or
			    (name . "^\\*ediff.*")
			    (name . "^\\*Ediff.*")
			    )
		)

	       ("PDFs"      (mode . pdf-view-mode))

               ("planner" (or
                           (name . "^\\*Calendar\\*$")
                           (name . "^diary$")
                           (mode . muse-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")
			 ))

               ("dired" (mode . dired-mode))

               ("latex" (mode . latex-mode))

               ("gnus" (or
                        (mode . message-mode)
                        (mode . bbdb-mode)
                        (mode . mail-mode)
                        (mode . gnus-group-mode)
                        (mode . gnus-summary-mode)
                        (mode . gnus-article-mode)
                        (name . "^\\.bbdb$")
                        (name . "^\\.newsrc-dribble")))
	       )
	      )
	     )
)
#+end_src 

#+RESULTS:
| default | (terminal (or (mode . term-mode) (mode . shell-mode) (mode . eshell-mode))) | (sidebar (mode . dired-sidebar-mode)) | (org (mode . org-mode)) | (python (or (mode . python-mode) (mode . inferior-python-mode) (name . ^\*ob-ipython.*))) | (ein (name . ^\*ein.*)) | (JSON (mode . json-mode)) | (magit (or (mode . magit-mode) (mode . magit-diff-mode) (mode . magit-process-mode) (name . ^magit.*))) | (tramp (name . ^\*tramp.*)) | (LSP (or (name . ^\*lsp.*) (name . ^\*pyls.*))) | (Ediffing (or (name . ^\*ediff.*) (name . ^\*Ediff.*))) | (PDFs (mode . pdf-view-mode)) | (planner (or (name . ^\*Calendar\*$) (name . ^diary$) (mode . muse-mode))) | (emacs (or (name . ^\*scratch\*$) (name . ^\*Messages\*$))) | (dired (mode . dired-mode)) | (latex (mode . latex-mode)) | (gnus (or (mode . message-mode) (mode . bbdb-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode) (name . ^\.bbdb$) (name . ^\.newsrc-dribble))) |

#+begin_src emacs-lisp 
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src 

#+RESULTS:
| lambda | nil | (ibuffer-switch-to-saved-filter-groups default) |


#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src 

#+RESULTS:
: ibuffer

#+begin_src emacs-lisp 
(defun ibuffer-collapse-all-filter-groups ()
  "Collapse all filter groups at once"
  (interactive)
  (setq ibuffer-hidden-filter-groups
        (mapcar #'car (ibuffer-current-filter-groups-with-position)))
  (ibuffer-update nil t))
#+end_src 

#+RESULTS:
: ibuffer-collapse-all-filter-groups

#+begin_src emacs-lisp 
(eval-after-load 'ibuffer'
  (define-key ibuffer-mode-map (kbd "C-c C-c")   'ibuffer-collapse-all-filter-groups) 
)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(defun ibuffer-expand-all-filter-groups ()
  "Expand all filter groups at once"
  (interactive)
  (setq ibuffer-hidden-filter-groups nil)
  (ibuffer-update nil t))
#+end_src 

#+RESULTS:
: ibuffer-expand-all-filter-groups

#+begin_src emacs-lisp 
(eval-after-load 'ibuffer'
  (define-key ibuffer-mode-map (kbd "C-c C-e")  'ibuffer-expand-all-filter-groups) 
)
#+end_src 

#+RESULTS:



* Elmacro

  This is a very nice feature if it works as it allows yourself to
  define a macro, work with it and then automatically convert it to
  some piece of elisp code. 

  I.e. to have a piece of function for it. You understand that this is
  very interesting as you already had to translate yourself a couple
  of times macros into functions. 

  Given the clear fact that you are not an expert of lisp having such
  a function will be helpful. It is obvious that this is a function
  such that you have to understand how well it implements the corner
  cases and works. 

#+BEGIN_SRC emacs-lisp
(use-package elmacro
  :ensure t
  :config (elmacro-mode))
#+END_SRC

#+RESULTS:
: t



* Swiper for incremental search

Swiper allows you to easily leverage regular expressions. By entering
a the beginning of a word a space and some other parts of the next
world it will automatically search two words pairs each containing the
expression entered.

Before compiling the code below remember to install through melpa both
swiper as counsel.

#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
:ensure t
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))
#+END_SRC

#+RESULTS:
: t


* Auto completion of words

To automatically advice on auto-completion given the words used in the
buffer.

** Company


*** General set up.

Try with company mode. Company mode integrates with flyspell in
org-mode and it is there chosen as the default auto-completion mode
for the org-mode.
#+Name: Company-auto-complete
#+BEGIN_SRC emacs-lisp
      (use-package company
	:config
        (setq company-dabbrev-downcase 0) ;; I noted that company is particularly slow in suggesting auto-completion words in comparison to auto-complete. 
        (setq company-idle-delay 0)       ;; The below code was suggested on the internet to speed company suggestion up and is tried now.
	(global-company-mode t)                                  ;(add-hook 'org-mode-hook 'company-mode)
	 )
#+END_SRC

#+RESULTS: Company-auto-complete
: t

The performance of company increased a lot with the two global options.

*** Synchronize company with pcomplete for org mode 

    Pcomplete integrates company such that when editing headers,
    processes, title and author and any other options in org mode
    starting with =#+= it will list all of the available options.

#+BEGIN_SRC emacs-lisp
(defun trigger-org-company-complete ()
  "Begins company-complete in org-mode buffer after pressing #+ chars."
  (interactive)
  (if (string-equal "#" (string (preceding-char)))
    (progn
      (insert "+")
      (company-complete))
    (insert "+")))

(eval-after-load 'org '(define-key org-mode-map
               (kbd "+") 'trigger-org-company-complete))
#+END_SRC

#+RESULTS:
: trigger-org-company-complete

*** Company cycle through

Very handy way to work with company such that you do not have to enter
the word you are interested in with the =RET= command but can rather
cycle through them with the =TAB= command. This will autocomplete the
word and you can then continue writing with the space.

Link for this handy tool: [[https://gist.github.com/aaronjensen/a46f88dbd1ab9bb3aa22][cycle_company]].

 #+BEGIN_SRC emacs-lisp
 ;; Modify company so that tab and S-tab cycle through completions without
 ;; needing to hit enter.

 (defvar-local company-simple-complete--previous-prefix nil)
 (defvar-local company-simple-complete--before-complete-point nil)

 (defun company-simple-complete-frontend (command)
   (when (or (eq command 'show)
             (and (eq command 'update)
                  (not (equal company-prefix company-simple-complete--previous-prefix))))
     (setq company-selection -1
           company-simple-complete--previous-prefix company-prefix
           company-simple-complete--before-complete-point nil)))

 (defun company-simple-complete-next (&optional arg)
   (interactive "p")
   (company-select-next arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete-previous (&optional arg)
   (interactive "p")
   (company-select-previous arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete//complete-selection-and-stay ()
   (if (cdr company-candidates)
       (when (company-manual-begin)
         (when company-simple-complete--before-complete-point
           (delete-region company-simple-complete--before-complete-point (point)))
         (setq company-simple-complete--before-complete-point (point))
         (unless (eq company-selection -1)
           (company--insert-candidate (nth company-selection company-candidates)))
         (company-call-frontends 'update)
         (company-call-frontends 'post-command))
     (company-complete-selection)))

 (defadvice company-set-selection (around allow-no-selection (selection &optional force-update))
   "Allow selection to be -1"
   (setq selection
         ;; TODO deal w/ wrap-around
         (if company-selection-wrap-around
             (mod selection company-candidates-length)
           (max -1 (min (1- company-candidates-length) selection))))
   (when (or force-update (not (equal selection company-selection)))
     (setq company-selection selection
           company-selection-changed t)
     (company-call-frontends 'update)))

 (defadvice company-tooltip--lines-update-offset (before allow-no-selection (selection _num-lines _limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (defadvice company-tooltip--simple-update-offset (before allow-no-selection (selection _num-lines limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (with-eval-after-load 'company
   (define-key company-active-map [tab] 'company-simple-complete-next)
   (define-key company-active-map (kbd "TAB") 'company-simple-complete-next)
   (define-key company-active-map (kbd "<S-tab>") 'company-simple-complete-previous)
   (define-key company-active-map (kbd "RET") nil)
   (define-key company-active-map (kbd "<return>") nil)

   (put 'company-simple-complete-next 'company-keep t)
   (put 'company-simple-complete-previous 'company-keep t)
   (setq company-require-match nil)
   (ad-activate 'company-set-selection)
   (ad-activate 'company-tooltip--simple-update-offset)
   (ad-activate 'company-tooltip--lines-update-offset)
   (add-to-list 'company-frontends 'company-simple-complete-frontend))

 (provide 'company-simple-complete)
 #+END_SRC

 #+RESULTS:
 : company-simple-complete

 
* Redirect Back up files into a single file

This saves all of the back-up files in the =.~/.saves=  directory and
keeps your other directories clear from them.

#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

#+RESULTS:
: ((. . ~/.saves))

** TODO should also include the # files and the tilde ones... these are also cluttering the code and annoying you


* Set Ispell Dictionary


Since emacs 24.4+ ispell.el has built-in support for detecting
Hunspell dictionaries and there is no manual configuration needed.

protto 

Just specify the global language that should be used when using the
dictionary.

#+begin_src emacs-lisp 
(setq exec-path (append exec-path '("c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/hunspell/bin")))
#+end_src 

#+RESULTS:
| c:/WINDOWS/system32 | C:/WINDOWS | C:/WINDOWS/System32/Wbem | C:/WINDOWS/System32/WindowsPowerShell/v1.0/ | C:/WINDOWS/System32/OpenSSH/ | C:/Program Files/1E/Client/Extensibility/NomadBranch | C:/Program Files (x86)/Microsoft SQL Server/110/Tools/Binn/ | C:/Program Files/Microsoft SQL Server/110/Tools/Binn/ | C:/Program Files/Microsoft SQL Server/110/DTS/Binn/ | C:/Program Files (x86)/Microsoft SQL Server/110/Tools/Binn/ManagementStudio/ | C:/Program Files (x86)/Microsoft SQL Server/110/DTS/Binn/ | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | C:/JavaServer/jdk-11.0.12+7/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Scripts | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Lib/site-packages | C:/Users/MARCO.HASSAN/AppData/Local/Microsoft/WindowsApps | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | C:/Dev/azure_data_studio/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/test_emacs_doom/.emacs.d/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/fd_program | C:/Dev/git/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/apache-maven-3.8.2/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/Microsoft VS Code/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/emacs-win/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/emacs-win/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ | /Users/marcohassan/.nvm/versions/node/v8.9.0/bin/ | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/hunspell | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/hunspell/bin |

#+Name: Ispell 
#+BEGIN_SRC emacs-lisp 
(setq ispell-program-name "hunspell") ;; Dictionaries


(setq ispell-dictionary "english")
#+END_SRC

#+RESULTS: Ispell
: english

So I think that the emacs config is strong enough. What is missing is
the correct hunspell binary. This one you can get via scientific
emacs - scimax of kitchin. Not working currently but I did a
workaround import. Try to install it again and see what happens. 

I think it is the classical OS specific stuff and the classical
porting problems that docker tries to solve.

I think that at some point I should refactor this entire emacs into a
docker container. It will be a good exercise and - I guess - a big win
on the long run.


* Flycheck 

  This is important. I have here the configuration as I have issues
  working in the usual way. I.e. the version tomatically installed via
  dependencies is not working.

  This because the there are integration issues with lsp. So it is not
  true that it is generally not valideIt is very well valid in general
  but lsp will likely become key to my development best practices as I
  plan to migrate my development experience to lsp. 

  You can read about the issues on flycheck and lsp [[https://github.com/flycheck/flycheck/issues/1754][here]]. It is clear
  then that the last melpa-stable version that you douwnload
  automatically will not be compatible with lsp. I set myself as
  watcher there. Should get notification as soon as the situation
  changes there.

  So the solution is to fetch it via github directly.

  So did not work - but finally flycheck 32 was released and
  everything is working now.


  #+begin_src emacs-lisp 
 (use-package flycheck
   :quelpa (flycheck :fetcher github :repo "flycheck/flycheck"))
  #+end_src 

  #+RESULTS:

** python issue

   When you get errors in any languages with flycheck it is a good
   exercise to check the setup with =flycheck-verify-setup=

   The issue there with pycomiple. In Windows 10 it was choosing the
   =python.exe= version in the windowsapps that would redirect to the
   python installation page. Horrible feature that Microsoft entered
   their OS.

   You can solve this one and for all in the following way: [[https://stackoverflow.com/questions/57485491/python-python3-executes-in-command-prompt-but-does-not-run-correctly/65520328#65520328][see here]].

* Latex 

#+begin_src emacs-lisp 
(setq exec-path (append exec-path '("C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/")))
#+end_src 

#+RESULTS:| c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/virtual_envs/lac_feed_nadine/Scripts | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python/Scripts | c:/WINDOWS/system32 | C:/WINDOWS | C:/WINDOWS/System32/Wbem | C:/WINDOWS/System32/WindowsPowerShell/v1.0/ | C:/WINDOWS/System32/OpenSSH/ | C:/Program Files/1E/Client/Extensibility/NomadBranch | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | C:/JavaServer/jdk-11.0.12+7/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Scripts | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Lib/site-packages | C:/Users/MARCO.HASSAN/AppData/Local/Microsoft/WindowsApps | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | C:/Dev/azure_data_studio/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/test_emacs_doom/.emacs.d/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/fd_program | C:/Dev/git/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/apache-maven-3.8.2/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/Microsoft VS Code/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/emacs-win/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/emacs-win/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64 | /Users/marcohassan/.nvm/versions/node/v8.9.0/bin/ | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ |


#+begin_src emacs-lisp 
(add-to-list 'org-latex-packages-alist '("" "listingsutf8"))
(add-to-list 'org-latex-packages-alist '("" "minted"))
#+end_src 

#+RESULTS:
|   | listingsutf8 |
|   | minted       |

#+begin_src emacs-lisp 
 ;; Allowing minted to highlight code in latex mode when exporting
 (setq org-latex-pdf-process
	 '("xelatex.exe -8bit -shell-escape  -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
	   "xelatex.exe -8bit -shell-escape  -interaction nonstopmode -output-directory %o %f"
	   "xelatex.exe -8bit -shell-escape  -interaction nonstopmode -output-directory %o %f"))


 (setq org-latex-listings 'minted)
 (setq org-latex-minted-options
	 '(("frame" "lines") ("linenos=true")))
#+end_src 

#+RESULTS:
| frame        | lines |
| linenos=true |       |


** Important Note 

   Note that somewhere in my config I decided to work with Pygments, I
   do not recall if I express it in the headers of my files or where
   else. 

   Anyways recall to install Pygments via your python on global
   level - not in venv -.

   You can do it as follows:

   #+begin_src 
As stated on its website, pygments is a tool written in Python. So you have to do the following:

Download and install a Python 3.X version.

Open a shell in administrator mode and issue ~pip install Pygments~.

Compile your LaTeX document.
   #+end_src


* Snippets

Snippets are a powerful tool that consists of pre-compiled code that
you can enter through some shortcuts. You can either enter and save
your own snippet or you can leverage the already built-in
snippets. These are various and allows you for instance to create
classes, open loops, etc. 

The package for working with snippets is =yasnippet= and the
documentation for the various snippets can be found at

#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC

#+RESULTS:

** Yasnippet-snippets

Also download the yasnippet-snippets library. There are many more
snippets there in comparison to the one included in the auto-yasnippet
above and I believe it might be useful working with these.

In his documentation he says that all the snippets will load
automatically as soon as yasnippet loads. Let's see.

Nice. This was correct. Once you downlaod the package through MELPA or
manually setting it into your working directory the snippets will
automatically be avaiable. No need for configuration in emacs.


* Org Mode

Very nice mode.


#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

#+RESULTS:
: org

** Basic configuration: 

   #+begin_src emacs-lisp 
   ;; ;; To open all .org files in org mode.
   (autoload 'org-mode "org-mode" "Org Mode." t)

   ;; workaround for not workign source code shortcut
   (when (version<= "9.2" (org-version))
     (require 'org-tempo))
   #+end_src

   #+RESULTS:
   : org-tempo

Switch among org buffers. This is a new feature intended to save time
as you will be prompted just with org buffers when changing buffers.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'org-switchb)

(global-set-key (kbd "C-c M-q") 'fill-paragraph)
#+End_Src

#+RESULTS:
: fill-paragraph

#+Begin_Src emacs-lisp 
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src 

#+RESULTS:
: 0

** For Nikola

#+begin_src emacs-lisp 
(defun nikola_img_url()
  (interactive)
  (search-backward "../../images")
  (setq p2 (point))
  (search-backward "file")
  (delete-region p2 (point))
  (insert "img-url:")
)
#+end_src 

#+RESULTS:
: nikola_img_url

Enter the last screenshot taken and moved to the =Blog/images= folder.

#+begin_src emacs-lisp 
(defun nikola_enter_last_img()
  (interactive)
  (insert (concat "\n#+begin_export html\n <img src=\"../../images/"
	(concat (car kill-ring) "\" class=\"center\">\n#+end_export\n"))
	)
    )
#+end_src 

#+RESULTS:
: nikola_enter_last_img

#+begin_src emacs-lisp 
(defun nikola_img_html()
  (interactive)
  (save-excursion
  (search-backward ".")
  (setq p1 (point))
  (search-backward "/Screenshot")
  (kill-region p1(point))
  (setq p2 (point))
  (beginning-of-line)
  (delete-region p2 (point))
  (insert "\n#+begin_export html\n <img src=\"../../images")
  (yank)
  (insert ".png\">\n#+end_export\n")
  (kill-line)
  )
  (kill-line)
)
#+end_src 

#+RESULTS:
: nikola_img_html


#+begin_src emacs-lisp 
(eval-after-load 'org' 
  (define-key org-mode-map
    (kbd "C-c M-i") 'nikola_enter_last_img)
  )
#+end_src 

#+RESULTS:
: nikola_enter_last_img

#+begin_src emacs-lisp 
(defun nikola_move_ein_image()
  (interactive)
  (save-excursion
  (setq p1 (point))
  (search-backward "ob-ein")
  (kill-region p1(point))
  (rename-file (concat  "~/Desktop/Blog/bits-of-experience/posts/ein-images/" (substring (car kill-ring) 0 -2)) (concat "~/Desktop/Blog/images/" (substring (car kill-ring) 0 -2)))
  (insert (yank))
  )
)

(defun nikola_ein_to_html()
  (interactive)
  (save-excursion
  (end-of-line)
  (search-backward "ein-images")
  (setq p1 (point))
  (search-forward "ein-")
  (kill-region p1(point))
  (insert "/")
  (end-of-line)
  (call-interactively 'nikola_img_html)
  )
)

(defun nikola_search_next_file()
  (interactive)
  (search-forward "file:")
  (end-of-line)
  (call-interactively 'nikola_move_ein_image)
)
#+end_src 

#+RESULTS:
: nikola_search_next_file

** Eliminate Results

#+begin_src emacs-lisp 
(defun eliminate-forward-results()
  (interactive)
  (save-excursion
    (search-forward "#+results")
    (org-hide-block-toggle)
    (beginning-of-line)
    (kill-line 2)
  ) 
)

(defun eliminate-backward-results()
  (interactive)
  (save-excursion
    (search-backward "#+results")
    (org-hide-block-toggle)
    (beginning-of-line)
    (kill-line 2)
  )
)
#+end_src 

#+RESULTS:
: eliminate-backward-results

** Go to the end of the results when particularly long

#+begin_src emacs-lisp 
(defun end-of-results()
  (interactive)
  (search-forward "#+end_example")
)
#+end_src 

#+RESULTS:
: end-of-results

** Export .org to .ipynb

   #+BEGIN_SRC emacs-lisp
     ;; Tell emacs where is your personal elisp lib dir
     ;; (add-to-list 'load-path "/Users/marcohassan/.emacs.d/ox-ipynb/")
   #+END_SRC

   #+RESULTS:

#+begin_src emacs-lisp 
  ;; (load "ox-ipynb")
  ;; (require 'ox-ipynb)
#+end_src 

#+RESULTS:

  Notice however the *important point*. You have to have your chunks
  in *ipython* and not *ein-python*

** Import .ipynb as .org

To do that please refer to the two step procedure mentioned in [[https://www.reddit.com/r/emacs/comments/7lcgkz/import_a_jupyter_notebook_to_an_orgmode_file/][this
post]].

Start by installing pandoc.

#+begin_example
 brew install pandoc
#+end_example

Essence:

#+begin_example
jupyter nbconvert notebook.ipynb --to markdown
pandoc notebook.md -o notebook.org 
#+end_example


For doing this in a loop you can use the following commands in bash

#+begin_example
$ for file in ./*.ipynb ; do jupyter nbconvert "$file" --to markdown  ; done                                                                      
$ for file in ./*.md ; do pandoc $file -o $(basename -- "$file" .md).org  ; done                                                                    
#+end_example

** Grammar Check

   #+BEGIN_SRC emacs-lisp
   (use-package flyspell
     :ensure t
     :config
     (add-hook 'org-mode-hook 'flyspell-mode))
   #+END_SRC

   #+RESULTS:
   : t


*** TODO fix the dictionary. 

    check at [[https://lists.gnu.org/archive/html/help-gnu-emacs/2014-04/msg00030.html][this]] url. I did not manage to make it work with
    ispell. did not find a version that could be read by my 64 bit
    computer architecture.

** Better navigation Scimax like

#+begin_src emacs-lisp 
 ;; Tell emacs where is your personal elisp lib dir
 (add-to-list 'load-path "C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/scimax-ob/")

 (load "scimax-ob")
#+end_src 

#+RESULTS:
: t

Just execute region; not working: [[https://emacs.stackexchange.com/questions/19169/org-mode-execute-region-in-session][here]].

Execute till cursor

#+begin_src emacs-lisp 
(defun babel-till-cursor
  (interactive)
  "
  Split the current src block with point in upper block.
  With a prefix BELOW move point to lower block.
  "
  (let* ((el (org-element-context))
	   (p (point))
	   (language (org-element-property :language el))
	   (switches (org-element-property :switches el))
	   (parameters (org-element-property :parameters el)))

      (insert (format "\n#+END_SRC
                     ,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters ""))))

    (org-babel-previous-src-block)

    (org-babel-execute-src-block)

    (let* ((src (org-element-context))
	   (nlines (org-element-property :post-blank src)))
      (goto-char (org-element-property :end src))

      (when (numberp nlines)
	(forward-line (* -1 (incf nlines))))
      (goto-char (line-end-position)))
    (beginning-of-line)
    (let ((beg (point)))
      (org-babel-next-src-block)
      (forward-line 1)
      (delete-region beg (point))
      (backward-delete-char 1)
      )
)
#+end_src 

#+RESULTS:
: babel-till-cursor


#+begin_src emacs-lisp 
(defun babel-after-cursor ()
  "Execute the block up until after the cursor"
  (interactive)
  (let* ((el (org-element-context))
	   (p (point))
	   (language (org-element-property :language el))
	   (switches (org-element-property :switches el))
	   (parameters (org-element-property :parameters el)))

      (insert (format "\n#+END_SRC
                     ,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters "")))

    (org-babel-execute-src-block)
    (delete-region p (point)))
    ;; (previous-line 3)
    ;; (kill-line 3)
)
#+end_src 

#+RESULTS:
: babel-after-cursor


For ein issues
#+begin_src emacs-lisp 
;; (defun kill-excess-lines ()
;;   "Execute the block up until after the cursor"
;;   (interactive)
;;     (kill-line 3)
;;     (backward-delete-char 1)
;; )

;; (defun test ()
;;   (interactive)
;;   (call-interactively 'prova-execute-after-cursor)
;;   (sleep-for 1) ;; else part
;;   (call-interactively 'kill-excess-lines) ;; then part
;; )
#+end_src 

#+RESULTS:


#+begin_src emacs-lisp 
(defun babel-cursor-line ()
  (interactive)

  (save-excursion 
     (let* ((el (org-element-context))
	      (p (point))
	      (language (org-element-property :language el))
	      (switches (org-element-property :switches el))
	      (parameters (org-element-property :parameters el))
	      )

     (beginning-of-line)
     (setq beg1 (point))

     (insert (format "\n#+END_SRC
			,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters "")))

     (end-of-line)
     (setq end1 (point))
     (insert (format "\n#+END_SRC
		      ,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters "")))
     )

     (org-babel-previous-src-block)
     (org-babel-execute-src-block)
     (search-backward "#+END_SRC")
     (previous-line 1)
     (kill-line 3)
     (search-forward "#+END_SRC")
     (beginning-of-line)
     (setq p2 (point))
     (search-forward "#+BEGIN_SRC")
     (end-of-line) 
     (delete-region p2 (point))
     (kill-line 2)
   )
)
#+end_src 

#+RESULTS:
: babel-cursor-line

#+begin_src emacs-lisp 
(defun babel-eval-region ()
  (interactive)

  (save-excursion

    (let* ((el (org-element-context))
	     (p (point))
	     (language (org-element-property :language el))
	     (switches (org-element-property :switches el))
	     (parameters (org-element-property :parameters el)))

	(insert (format "\n#+END_SRC
		       ,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters "")))

	(exchange-point-and-mark)

	(insert (format "\n#+END_SRC
		       ,#+BEGIN_SRC %s %s %s\n" language (or switches "") (or parameters ""))))

      (org-babel-execute-src-block)

      (previous-line 3)
      (kill-line 3)

      (org-babel-next-src-block)
      (kill-line 1)
      (setq p2 (point))
      (search-backward "#+END_SRC")
      (delete-region p2 (point))
      (kill-line 1)
    )

    (run-with-idle-timer 2 nil
	    (lambda ()
	      (message "%s" (propertize "region executed" 'face '(:foreground "red")))
	      (run-with-idle-timer 3 nil
		      (lambda ()
			(message nil)))))

)
#+end_src 

#+RESULTS:
: babel-eval-region

** Export modes

#+BEGIN_SRC emacs-lisp
  ;; Exporting in markdown and beamer mode
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

#+RESULTS:
: ox-beamer

** Map My Functions OrgMode

Map all the nice execution functions for org babel chuncks.

#+begin_src emacs-lisp 
(eval-after-load 'org' (progn 
			 (define-key org-mode-map
			   (kbd "C-c s-c") 'scimax-execute-and-next-block)
			 (define-key org-mode-map
			   (kbd "C-c C-v s-a") 'scimax-insert-src-block)
			 (define-key org-mode-map
			   (kbd "C-c s-m") 'scimax-ob-merge-blocks)
			 (define-key org-mode-map
			   (kbd "C-c s-k") 'scimax-ob-kill-block-and-results)
			 (define-key org-mode-map
			   (kbd "C-c s-l") 'scimax-ob-clear-all-results)
			 (define-key org-mode-map
			   (kbd "C-c C-v m") 'scimax-ob-jump-to-end)
			 (define-key org-mode-map
			   (kbd "C-c s-h") 'babel-till-cursor)
			 (define-key org-mode-map
			   (kbd "C-c s-a") 'babel-after-cursor)
			 (define-key org-mode-map
			   (kbd "C-c s-p") 'babel-cursor-line)
			 (define-key org-mode-map
			   (kbd "C-c s-r") 'babel-eval-region)
			 (define-key org-mode-map
			   (kbd "C-c s-f") 'eliminate-forward-results)
			 (define-key org-mode-map
			   (kbd "C-c s-b") 'eliminate-backward-results)
			 (define-key org-mode-map
			   (kbd "C-c s-e") 'end-of-results)
			 ))
#+end_src 

#+RESULTS:
: end-of-results

** PlantUML

   For creating UML diagrams in org mode. Followed the instructions
   [[http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html][here]] for the set-up. You can download the necessary =.jar= file
   [[https://sourceforge.net/projects/plantuml/files/plantuml.jar/download][here]]. I moved it in the =.emacs.d= repo.

   Important is moreover to install =graphviz= if you want to create
   diagrams that are not sequence diagrams. This can be done in the
   MAC [[https://brewinstall.org/install-graphviz-on-mac-with-brew/][as follows]].

   #+begin_src emacs-lisp 
   (setq org-plantuml-jar-path
	 (expand-file-name "C:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/plantuml.jar"))
   #+end_src 

   #+RESULTS:
   : C:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/plantuml.jar

** Org-Blocks Display temporarily line numbers

From Kitchin [[http://kitchingroup.cheme.cmu.edu/blog/2015/10/13/Line-numbers-in-org-mode-code-blocks/][link]].

#+begin_src emacs-lisp 
(defun temp-line-src-block ()
  (interactive)
      (defvar number-line-overlays '()
	"List of overlays for line numbers.")

      (make-variable-buffer-local 'number-line-overlays)

      (defun number-line-src-block ()
	(save-excursion
	  (let* ((src-block (org-element-context))
		 (nlines (- (length
			     (s-split
			      "\n"
			      (org-element-property :value src-block)))
			    1)))
	    (goto-char (org-element-property :begin src-block))
	    (re-search-forward (regexp-quote (org-element-property :value src-block)))
	    (goto-char (match-beginning 0))

	    (loop for i from 1 to nlines
		  do
		  (beginning-of-line)
		  (let (ov)
		    (setq ov (make-overlay (point) (point)))
		    (overlay-put ov 'before-string (format "%3s " (number-to-string i)))
		    (add-to-list 'number-line-overlays ov))
		  (next-line))))

	;; now read a char to clear them
	(read-key "Press a key to clear numbers.")
	(mapc 'delete-overlay number-line-overlays)
	(setq number-line-overlays '()))

      (number-line-src-block)
)
#+end_src 

#+RESULTS:
: temp-line-src-block

Bind it to a kbd

#+begin_src emacs-lisp 
;; define keyboard shortcuts for special mode
(eval-after-load "org-mode"
     (define-key org-mode-map (kbd "C-c C-v 1") 'temp-line-src-block)
)
#+end_src 

#+RESULTS:

** Layout

   #+BEGIN_SRC emacs-lisp
     ;; Use syntax highlighting in source blocks while editing.
     (setq org-src-fontify-natively t)

     ;; Make TAB act as if it were issued in a buffer of the languages major mode.
     (setq org-src-tab-acts-natively t)

     ;; I like to see an outline of pretty bullets instead of a list of asterisks.
     (use-package org-bullets
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))

     ;; I like seeing a little downward-pointing arrow instead of the usual
     ;; ellipsis (...) that org displays when there is stuff under a header.
     (setq org-ellipsis " >>")
   #+END_SRC

   #+RESULTS:
   :  >>

** Shortcuts to insert chunk of code

   With the global key board shortcut you can further insert the name of
   a section in emacs.

   Notice the below method do write a lambda function that requires no
   name and previous specification and to execute it just in org-mode so
   that the shortcut is defined just for the defined mode.

   #+Name: write_name
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c q") "#+Name: ")))
   #+END_SRC

   #+RESULTS: write_name
   | (lambda nil (local-set-key (kbd C-c q) #+Name: )) | org-bullets-mode | flyspell-mode | org-tempo-setup | turn-on-auto-fill | enable-paredit-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


   The next three chunck define shortcuts for creating chunck in
   different languages.
   

   #+Name: write_source_lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 1") "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC")))
   #+END_SRC

   #+RESULTS: write_source_lisp
   | (lambda nil (local-set-key (kbd C-c 1) #+BEGIN_SRC emacs-lisp |



   #+Name: write_source_R
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 2") "#+BEGIN_SRC R\n\n#+END_SRC")))
   #+END_SRC

   #+RESULTS: write_source_R
   | (lambda nil (local-set-key (kbd C-c 2) #+BEGIN_SRC R |



   #+Name: write_source_python
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c 3") "#+BEGIN_SRC python\n\n#+END_SRC")))
   #+END_SRC

   #+RESULTS: write_source_python
   | (lambda nil (local-set-key (kbd C-c 3) #+BEGIN_SRC python |



*** TODO Consider Snippets
    :PROPERTIES:
    :ID:       e30eef15-0142-443e-b189-d802875fb1a6
    :END:
    
    The below works but I have noted that it usually takes a while to
    insert a chunk. Another viable solution is to use
    snippets. Consider that

** Babel

   #+BEGIN_SRC emacs-lisp
;; Allow code evaluation in the org mode source code chunck
(use-package gnuplot
  :ensure t) ;; recall to download it trough MELPA at first

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   ;; (C . t)
   ;; (R . t)
   (sql . t)
   ;; (ein . t)
   (python . t)
   ;; (shell . t)
   (emacs-lisp . t)
   ;; (latex . t)
   ;; (js . t)
   (java . t)
   (plantuml . t) ;; for UML diagrams
   ))

;; Don't ask before executing code in the chunck.
(setq org-confirm-babel-evaluate nil)
   #+END_SRC

   #+RESULTS:

Add to company the ob-ipython dict.

#+begin_src emacs-lisp 
 ;; (add-to-list 'company-backends 'company-ob-ipython)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src 

#+RESULTS:
| org-display-inline-images |

#+begin_src emacs-lisp 
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted) 
#+end_src 

#+RESULTS:
: minted

** Org tangle append

Should tangle then the chunck at the end of a file.
#+begin_src emacs-lisp 
(defun org-babel-tangle-append ()
  "Append source code block at point to its tangle file.
The command works like `org-babel-tangle' with prefix arg
but `delete-file' is ignored."
  (interactive)
  (cl-letf (((symbol-function 'delete-file) #'ignore))
    (org-babel-tangle '(4))))

(defun org-babel-tangle-append-setup ()
  "Add key-binding C-c C-v C-t for `org-babel-tangle-append'."
  (org-defkey org-mode-map (kbd "C-c C-v +") 'org-babel-tangle-append))

(add-hook 'org-mode-hook #'org-babel-tangle-append-setup)
#+end_src 

#+RESULTS:
| org-babel-tangle-append-setup | (lambda nil (local-set-key (kbd C-c 3) #+BEGIN_SRC python |

** Org results toggle hide shortcut

#+begin_src emacs-lisp 
(org-defkey org-mode-map (kbd "C-c C-x r") 'org-babel-hide-result-toggle)
#+end_src 

#+RESULTS:
: org-babel-hide-result-toggle

** Agenda

*** General Config

   #+BEGIN_SRC emacs-lisp
     ;; Shortcut for org agenda
     (global-set-key  (kbd "\C-c a")  'org-agenda)

     ;; specify to-do iterations with C-c t
     (setq org-todo-keywords
	   '((sequence "TODO" "IN-PROGRESS" "WAITING" "TO-BE-INTEGRATED" "ISSUE" "DEPENDENCY_BLOCK" "QUESTION" "DONE")))
   #+END_SRC

   #+RESULTS:
   | sequence | TODO | IN-PROGRESS | WAITING | TO-BE-INTEGRATED | ISSUE | DEPENDENCY_BLOCK | QUESTION | DONE |

*** Open agenda into its own buffer
 #+BEGIN_SRC emacs-lisp
 (defun air-pop-to-org-agenda (split)
   "Visit the org agenda, in the current window or a SPLIT."
   (interactive "P")
   (org-agenda-list)
   (when (not split)
     (delete-other-windows)))

 (define-key global-map (kbd "C-c t a") 'air-pop-to-org-agenda)
 #+END_SRC

 #+RESULTS:
 : air-pop-to-org-agenda

*** Archiving

#+BEGIN_SRC emacs-lisp
  ;; Set archiving location.
  (setq org-archive-location "C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/archive.org::* From %s")

  ;; Done and archive
  (defun mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)
  
  ;; Record the time that a todo was archived.
  (setq org-log-done 'time)
#+END_SRC

#+RESULTS:
: time

*** Capture

    This section frames the way in which to capture short notes and to
    do stuff in the middle of the day. Here everyday tasks will be
    saved.

 #+begin_src emacs-lisp 
 ;; where the notes will be stored. the reference is the previously
 ;; defined org directory.
  (setq org-default-notes-file "C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org")
 #+end_src 

 #+RESULTS:
 : C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org

 Define the global map for using org-capture

 #+begin_src emacs-lisp 
 (global-set-key  (kbd "\C-c c")  'org-capture)
 #+end_src 

 #+RESULTS:
 : org-capture

 This is the templates that will allow you to quickly add notes to your
 capture.org file.

 #+begin_src emacs-lisp 
 (setq org-capture-templates
      (quote (("t" "todo" entry (file "C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org")
	     "* TODO %?\n%U\n%a\n:PROPERTIES:\n:WILD_NOTIFIER_NOTIFY_BEFORE: 30 10 5\n:END:") ;; if you want to clock in time --- :clock-in t :clock-resume t)
	      ("n" "note" entry (file "~/Dropbox/Applicazioni/MobileOrg/capture.org")
	     "* %? :NOTE:\n%U\n%a\n") ;; if you want to clock in time --- :clock-in t :clock-resume t)
	    )))
 #+end_src 

 #+RESULTS:
 | t | todo | entry | (file C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org) | * TODO %? |

*** Description of org-agenda properties

    [[https://orgmode.org/manual/Repeated-tasks.html][This]] is a nice article that explains you well how to use the
    agenda tags.

    Basically there are three types of hourly tags:

    - =+= it means that when you mark it as done it shifts by the
      given amount of time.

    - =++= it means that when you mark it as done it shifts by the
      given amount of time *in the future*. It means that for instance
      if you had a scheduled event that you do not mark as done since
      3 weeks it will not mark it as done and shift the date 2 weeks
      in the past but rather 1 week *into the future*.

    - =.+= it means that when you mark it as done it shifts by the
      given amount as of *today/exact moment when you mark it as done*.

*** Org Mobile 

    Would be cool but not sure how easy that will be given the
    constraints and the fact that you use one-drive.

    Check at your mac documentation when you will want to do it.

*** Calfw

  That is nice I think that with it your agenda view is done. Note
  that functions are mapped to =cfw:...=

#+begin_src emacs-lisp 
(use-package calfw
 :ensure t)

(use-package calfw-org
  :after calfw
  )
#+end_src 

#+RESULTS:

 #+BEGIN_SRC emacs-lisp
 (defun air-to-org-cfw-agenda (split)
   "Visit the org agenda, in the current window or a SPLIT."
   (interactive "P")
   (cfw:open-org-calendar))

 (define-key global-map (kbd "C-c t a") 'air-to-org-cfw-agenda)
 ;; advanced syntax. with C-u C-c t a you open the agenda in the other
 ;; window without deleting it.
 #+END_SRC

 #+RESULTS:
 : air-to-org-cfw-agenda

*** Task and org-capture management

    Set the org-agenda files.

    #+BEGIN_SRC emacs-lisp
      ;; Create and Specify Agenda folder.
      (setq org-agenda-files '("C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org"))
    #+END_SRC

    #+RESULTS:
    | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Agenda/capture.org |


*** IN-PROGRESS notifications for agenda entries

    Org-alert is working smoothly. The issue is with alert. It is not
    displaying alerts how I would wish... cannot understand where the
    issue is.

    You would then just have to enable its mode and specify every how
    much it should check your todos. Keep [[https://www.youtube.com/watch?v=wKTKmE1wLyw][this video]] as reference.

    #+begin_src emacs-lisp 
    (use-package org-alert
      :ensure t
      :config
      (setq org-alert-interval 300 ;; every 5 min run alert.
            org-alert-notification-title "Org Alert Reminder!")
      ;; (org-alert-enable)
      :bind (("C-c t c" . org-alert-check))
    )
    #+end_src 

    #+RESULTS:
    : org-alert-check

     Weird, after emacs reboot did not work out of the box. Had to
     eval-buffer org-alert.el and run following block

     I did it like that in the end.... not the best but it
     works... see commented line of how it was at the beginning

     #+begin_src emacs-lisp 
     ;; try to rewrite a function 
     (defun org-alert-check ()
       "Check for active, due deadlines and initiate notifications."
       (interactive)
       (org-alert--preserve-agenda-buffer)
       (let ((active (org-alert--filter-active (org-alert--get-headlines))))
	 (dolist (dl (org-alert--strip-states active))
	   (shell-command-to-string (concatenate 'string "echo " dl " | terminal-notifier -title Emacs_Reminder -sound default  -appIcon http://upload.wikimedia.org/wikipedia/commons/5/59/Emacs_512.png"))))
	   ;; (alert dl :title org-alert-notification-title)))
       (org-alert--restore-agenda-buffer))
     #+end_src 

     #+RESULTS:
     : org-alert-check

     Org-alert works properly the issue is that it does not allow you
     to get reminders just after your event is sufficiently close in
     time. I.e. it notifies you of the todos of the entire day and
     that is a bit too much.

     In this sense org-wild-notifier helps as it ships with a default
     notification at 10 min. So it notifies you 10 min before the
     event. You can also change it setting different arguments for the
     =org-wild-notifier-alert-time=. 

     Moreover when specifying a todo you can also set the option of
     when it should remind you the todo, in the following way:

     #+begin_example
     :PROPERTIES:
     :WILD_NOTIFIER_NOTIFY_BEFORE: 80 60 55 43 33 32 31 30 29 27 26 25 24 5
     :END:
     #+end_example

     You can then modify your default capture template to include such
     a default. This is in fact what I did above in the
     =org-capture-templates=.

    #+begin_src emacs-lisp 
    (use-package org-wild-notifier
      :ensure t)
    #+end_src 

    #+RESULTS:

**** TODO would have to fix the way you get notificaitons here. should not be too difficult if you really want to do it.

     Again have to use your workaround alert as this is not really working.

     #+begin_src emacs-lisp 
    (defun org-wild-notifier--notify (event-msg)
      "Notify about an event using `alert' library.
    EVENT-MSG is a string representation of the event."
      (shell-command-to-string (concatenate 'string "echo " event-msg " | terminal-notifier -title Emacs_Reminder -sound default  -appIcon http://upload.wikimedia.org/wikipedia/commons/5/59/Emacs_512.png")))
      ;; (alert event-msg :title org-wild-notifier-notification-title :severity org-wild-notifier--alert-severity))
     #+end_src 

     #+RESULTS:
     : org-wild-notifier--notify

*** TODO Encryption

Encrypt messages sent to the app and on dropbox via symmetric
encrytion.

Need OpenSSL to use encryption.
#+BEGIN_SRC emacs-lisp
  ;; ;; Enable encryption
  ;; (setq org-mobile-use-encryption t)
  ;; ;; Set a password
  ;; (setq org-mobile-encryption-password "427726")
#+END_SRC

#+RESULTS:

*** Open index file

    I do not remember why I was writing this piece of code.

    #+BEGIN_SRC emacs-lisp
      (defun hrs/open-index-file ()
	"Open the master org TODO list."
	(interactive)
	(hrs/copy-tasks-from-inbox)
	(find-file org-index-file)
	(flycheck-mode -1)
	(end-of-buffer))

      (global-set-key (kbd "C-c i") 'hrs/open-index-file)
    #+END_SRC

#+RESULTS:
: hrs/open-index-file

** Org store link

   This is important cause in such a way you can easily make
   cross-sectional and cross-files links that you can then use for
   navigating your knowledge base. 

   #+begin_src emacs-lisp 
     (add-hook 'org-mode-hook
	       (lambda () (local-set-key (kbd "C-c l") 'org-store-link)))
   #+END_SRC

   #+RESULTS:
   | (lambda nil (local-set-key (kbd C-c l) 'org-store-link)) | org-babel-tangle-append-setup | (lambda nil (local-set-key (kbd C-c 3) #+BEGIN_SRC python |

** Org view tags 

   #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
	  (lambda () (local-set-key (kbd "C-c C-x t") 'org-tags-view)))
   #+END_SRC

   #+RESULTS:
   | (lambda nil (local-set-key (kbd C-c C-x g) 'org-tags-view)) | (lambda nil (local-set-key (kbd C-c C-x t) 'org-tags-view-command)) | (lambda nil (local-set-key (kbd C-c C-x t) 'org-tags-view)) | (lambda nil (local-set-key (kbd C-c C-x t) '(org-tags-view))) | (lambda nil (local-set-key (kbd C-c l) 'org-store-link)) | org-babel-tangle-append-setup | (lambda nil (local-set-key (kbd C-c 3) #+BEGIN_SRC python |


* Screenshot Management and handling static files for Blog 

  Note that due to the fact that there is no support for bash on my
  Windows account my usual working flow for my blog was disrupted. 

  In this sense I need to codify the bash scripts that I was using
  into eshell. 

  This can be done by running eshell calling lisp functions. 
  
  [[*Copy local pictures from Blog to the bits-of-experience folder][Copy local pictures from Blog to the bits-of-experience folder]]

  [[*Push all of the images videos and pdfs to your blog][Push all of the images videos and pdfs to your blog]]

  [[*create index on your org-files][create index on your org-files]]

** Copy local pictures from Blog to the bits-of-experience folder

   #+begin_src emacs-lisp 
(defun blog/move_blog_files()
  "Move all of the necessary file to the Blog"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert "cd 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Blog/bits-of-experience'; git checkout windows_OS; cp -r ../pdfs ./output/pdfs; cp ../images/* ./output/images; cp -r ../videos/* ./output/videos;")
    (eshell-send-input)
    )
  )
   #+end_src 

   #+RESULTS:
   : blog/move_blog_files


** Name last picture saved

Add awk to the exec-path. Will be used by eshell for inserting the
last image. 

#+begin_src emacs-lisp 
(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin")
  #+END_SRC

  #+RESULTS:
  | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | c:/WINDOWS/system32 | c:/WINDOWS | c:/WINDOWS/System32/Wbem | c:/WINDOWS/System32/WindowsPowerShell/v1.0 | c:/WINDOWS/System32/OpenSSH | c:/Program Files/1E/Client/Extensibility/NomadBranch | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | c:/JavaServer/jdk-11.0.12+7/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Scripts | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Lib/site-packages | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | c:/Dev/azure_data_studio/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/test_emacs_doom/.emacs.d/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | c:/Dev/git/bin | c:/Dev/git/usr/bin | c:/Dev/apache-maven-3.8.2/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/software-for-import-on-zurich/hunspell2/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | c:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin | c:/Users/marco.hassan/AppData/Local/Microsoft/WindowsApps | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 |

  Ok with the below you have the desired workflow. You have to call
  the two functions separately. I tried to combine the two into a
  single function but you have then some erratic behaviour.

  You can fix it at some point when you have more time and are not
  embording a new company and job role. It is fine like that for me at
  the moment as it is already a huge improvement in my workflow and it
  will save quite some time. 

#+begin_src emacs-lisp
(defun name_last_pic()
    "Get the name of the last picture"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert "cd 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Pictures/Saved Pictures/'; ls -lt | awk 'FNR == 2 {a=match($0, $9); print substr($0,a)}'")
    (eshell-send-input)
    (search-forward "Screenshot")
    (beginning-of-line)
    (kill-line)
    )
  )
#+end_src 

#+RESULTS:
: name_last_pic

#+begin_src emacs-lisp 
(define-key global-map (kbd "C-c n n") 'name_last_pic)
#+end_src 

#+RESULTS:
: name_last_pic


** Screenshot Management for Blog

#+begin_src emacs-lisp 
(defun blog/move_last_screenshot_to_blog()
  "Move the last Picture to the blog"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert (concat "mv 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Pictures/Saved Pictures/"
	(concat (car kill-ring) "' 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Blog/images/'")
	)
    )
    (eshell-send-input)
    )
  )
#+end_src 

#+RESULTS:
: blog/move_last_screenshot_to_blog

#+begin_src emacs-lisp 
(defun blog/move_last_screenshot_to_blog()
  "Move the last Picture to the blog"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert (concat "mv 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Pictures/Saved Pictures/"
	(concat (car kill-ring) "' 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Blog/images/'")
	)
    )
    (eshell-send-input)
    )
  )
#+end_src 

#+RESULTS:
: blog/move_last_screenshot_to_blog


** Screenshot Management for technical notes

   #+begin_src emacs-lisp 
(defun screenshot/move_last_screenshot_to_techNotes()
  "Move the last Picture to the blog"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert (concat "mv 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Pictures/Saved Pictures/"
		    (concat (car kill-ring) "' 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Notes/technical_material/images/'")
		    )
	    )
    (eshell-send-input)
    )
  )
   #+end_src 

   #+RESULTS:
   : screenshot/move_last_screenshot_to_techNotes

   Enter the screenshot that you just moved in the relevant archive.

   #+begin_src emacs-lisp 
(defun screenshot/techNotes_enter_last_img()
  (interactive)
  (insert (concat "\n[[file:../images/" 
		  (concat (car kill-ring) "]]\n"))
	  )
  )
   #+end_src 

   #+RESULTS:
   : screenshot/techNotes_enter_last_img



** Screenshot Management for org mode - keeping screenshot in default folder

#+begin_src emacs-lisp 
(defun screenshots_enter_last_img()
  "Insert the last save image in org.
   Recall to execute name_last_pic before executing the function."
  (interactive)
  (insert 
   (concat "[[file:c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Pictures/Saved Pictures/"
	   (concat (car kill-ring) "]]")
	   )
   )
  )
#+end_src 

#+RESULTS:
: screenshots_enter_last_img

#+BEGIN_SRC emacs-lisp 
(eval-after-load 'org' (progn 
			 (define-key org-mode-map
			   (kbd "C-c C-x s") 'screenshots_enter_last_img)                         
			 ))
#+END_SRC

#+RESULTS:
: screenshots_enter_last_img


** Push all of the images videos and pdfs to your blog

#+begin_src emacs-lisp 
(defun blog/push_resources_to_blog()
  "Adds all of the resources to the blog"
  (interactive)
  (with-current-buffer "*eshell*"
    (eshell-return-to-prompt)
    (insert "cd 'c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Blog/bits-of-experience'; git checkout gh-pages; cp -r ../pdfs .; cp ../images/* ./images; cp -r ../videos .; git add .; git commit -m 'add pdfs and videos'; git push; git checkout windows_OS")
    (eshell-send-input)
    )
  )
#+end_src 

#+RESULTS:
: blog/push_resources_to_blog


** TODO HEIC to jpeg

   This via the [[https://imagemagick.org/script/download.php#windows][magick software]]...

   Ok here you have the bash script to get what you want... write it
   to an executable shell file now. 

#+BEGIN_SRC emacs-lisp
(defun blog/HEIC_to_jpg()		
  "Adds all of the resources to the blog"
  (interactive)
  (with-current-buffer "*shell*"
    (insert "for f in *.HEIC; do magick.exe $f $(basename $f .HEIC)".jpg"; done")
    )
  )
#+END_SRC

#+RESULTS:
: blog/HEIC_to_jpg


** create index on your org-files

   So the thing is that despite the fact that you can navigate the
   notes on your org-mode in a very nice way, the format of your
   nikola blog does not add an index to your post. This is suboptimal
   cause at some point my notes become too large to be easily
   navigable.

   So you could check at your notes directly on your org-notes in your
   emacs. I noted that this is not the best way for me to work and
   that I usually prefer the rendering of the notes available online. 

   So it would be cool to write some lisp function that creates that
   automatically at some point. 

   In the meanwhile use the following way of generating them.

   Generate them for each node with children. Do that via emacs-macros
   in the following way:

   - next line. =org-store-link=. =C-c c-u= (go on higher level in the
     hierarchy). =C-c c-n= go to the next sub-header. Go to line
     before. =org-insert-last-store-link=. =C-o= go to that baby. 

   Followed more less the steps above. Result with elmacro.

   You use it now in the following way. Go on the section you want to
   create the index for. *Go on the first sub-heading*. 

   Call the function. It will add the index one level higher to the
   indeces you want to create. Then you repeat. What I usually do is
   calling the function once with the binding defined next saving
   that in a macro and iterating with =e=. Then you quickly do the
   index for the section. It is just a matter of keeping the things
   up to date.

   *Important note:* if the index will not be up to date your nikola
   websites will not be able to compile. Double check this in that case.

   #+BEGIN_SRC emacs-lisp
(defun indexing ()
  (interactive )
  (setq last-command-event 108)
  (org-store-link nil 1)
  (setq last-command-event 21)
  (outline-up-heading 1)
  (setq last-command-event 14)
  (org-next-visible-heading 1)
  (setq last-command-event 16)
  (previous-line 1 1)
  (setq last-command-event 45)
  (org-self-insert-command 1)
  (setq last-command-event 32)
  (org-self-insert-command 1)
  (setq last-command-event 134217836)
  (org-insert-last-stored-link 1)
  (setq last-command-event 16)
  (previous-line 1 1)
  (setq last-command-event 5)
  (org-end-of-line 1)
  (setq last-command-event 2)
  (backward-char 1)
  (setq last-command-event 15)
  (org-open-at-point nil)
  (setq last-command-event 6)
  (org-forward-heading-same-level 1)
  (setq last-command-event 'f4)
  )

   #+END_SRC

   #+RESULTS:
   : indexing

   Bind the method above to a keyboard binding

   #+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c n i") 'indexing)
   #+END_SRC

   #+RESULTS:
   : indexing


* Time management and Pomodoro Technique
  :LOGBOOK:
  CLOCK: [2021-02-05 Fri 12:02]--[2021-02-05 Fri 12:15] =>  0:13
  CLOCK: [2021-02-05 Fri 11:48]--[2021-02-05 Fri 12:01] =>  0:13
  CLOCK: [2021-02-05 Fri 11:43]--[2021-02-05 Fri 11:48] =>  0:05
  CLOCK: [2021-02-05 Fri 11:39]--[2021-02-05 Fri 11:42] =>  0:03
  CLOCK: [2021-02-05 Fri 11:39]--[2021-02-05 Fri 11:39] =>  0:00
  :END:

  This section experiments a bit with some time management
  techniques. I discovered it is not just bla bla. You can in fact
  work much more productively with basics time management
  techniques. I started using some during my last exam session. It was
  a hard one and I was often distracted. Well I decided to set
  timers. During some time I was working. Then I was regularly doing
  breaks reading my current book. It worked and I managed to read 250
  pages during the most hard exam session I ever experienced. 

  It turned out when discussing with my dare gf, that there is a very
  well known technique that supports such a behaviour. It is the
  pomodoro technique. It consists in measuring everything in
  pomodoros. That is 25min. intervals.

  During such intervals you work at 100% without any distractions and
  then from time to time you take breaks and switch off. But when you
  work you work at 100%. You do not mix stuff.

  Let's start with the basics in emacs. And let's then expand to the
  pomodoro.

  
** Org-Clocks

   So the basics thing is to log all of your work. I.e. check how much
   time you needed to compute tasks. After all: /just if you can
   measure it, you can improve it/. 

   One very easy way to do that in emacs is via the =org-clock-in=
   function mapped to ~C-c C-x TAB~, in my emacs. Its correspondent is
   =org-clock-out= mapped to ~C-c C-x C-o~. In such a way you will be
   able to start a measurement in the org header and stop it and the
   time the time of the clock will be registered in the logbook. Check
   this very emacs file you are editing should you be confused at any
   time. Also interesting are the ~C-c C-x C-j~, i.e. the
   =org-clock-goto= command that makes you jump to the header where
   your clocks are registered. Even more interesting are the ~C-c C-x
   C-d~ command, i.e. =org-clock-display= command that when run in the
   section it tells you exactly how many hours you spend on the section
   according to your clocked in time.

   Well, that all came in by default with emacs =org-mode=. I just have
   never the time so far to check at it properly and makes sense of all
   of that. Now that I am taking the time and writing this post it
   makes well sense. Wonderful tool. Quick usage through the
   shortcuts. 

   Notice that there are also other more advanced features. Let's
   leave it for now. Should you want to check at them later check the
   official [[https://orgmode.org/manual/Clocking-Work-Time.html][org documentation]].


** Pomodoro
   :LOGBOOK:
   CLOCK: [2021-09-07 Di. 12:34]
   :END:

   Let's go back to the pomodoro technique, the thing for which you
   actually started to dig into such time management tools. So
   apparently tools to work with the pomodoro technique were
   implemented /en mass/ into emacs. Well no surprise. If you know
   emacs, then you know we emacs people value a lot productivity and
   try all the sorts of the escamotages in order to increase it.

   So the most popular package is the pomodoro one. You can install it
   as follows given that you are using the =use-package= package. 

 #+begin_src emacs-lisp 
;; could not find it normally.
;; (use-package pomodoro
;;   :ensure t
;;   :init (pomodoro-add-to-mode-line))


;; use the quelpa mirror because of that
 (use-package pomodoro
   :quelpa (pomodoro :fetcher github :repo "emacsmirror/pomodoro")
   :config (pomodoro-add-to-mode-line)
   :bind (("C-c C-v s-p" . pomodoro-start)
	  ("C-c C-v s-s" . pomodoro-stop)
          ("C-c C-x s-p" . pomodoro-pause)
	  ("C-c C-x s-r" . pomodoro-resume))
   )
 #+end_src 

 #+RESULTS:
 : pomodoro-resume


   Good with the above quelpa mirror you managed to install it. Notice
   that here the functions to start your pomodoro timer is
   =pomodoro-start=. There are then a couple of functions to =pause=,
   =resume= etc. your pomodoro. Notice that here the time with the
   add-to-mode-line above is displayed in little on the bottom left of
   your mode-line. That is fine. Use this in general and not when
   editing org files. For this there is a better option that we will
   explore next.

   Another option that directly integrates with emacs org
   mode clocks previously described is the =org-pomodoro=
   package. That starts a clock as the =clock-in= command above and
   after 25 min. it should expire. I read that the notification when
   it expires is not that great so they suggested to add the
   =libnotify= option below.

 #+begin_src emacs-lisp 
(use-package org-pomodoro
  :ensure t
  ;; :config
  ;; (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
   :bind (("C-c C-x s-o" . org-pomodoro)
	  ("C-c C-x s-e" . org-pomodoro-extend-last-clock))
)
 #+End_src 

 #+RESULTS:
 : org-pomodoro-extend-last-clock

   Let's give it a go for the next task then. Now I have no time to
   wait other 25min. to see the behaviour. The milestone was set and
   for the next projects you can start with your time management
   techniques.


** Org-Trello
   :LOGBOOK:
   CLOCK: [2021-04-02 Fri 16:31]--[2021-04-02 Fri 16:56] =>  0:25
   :END:

   #+begin_src emacs-lisp 
;; (use-package org-trello
;;   :ensure t)
   #+end_src    

   #+RESULTS:

   The authors say not to use org-trello mode on each buffer as it
   limits the org mode capabilities as it is actually an org-mode
   wrapper.

#+begin_src emacs-lisp 
;; they advice to set it in such a way.

;; (custom-set-variables '(org-trello-files '("/path/to/file0" "/path/to/file1")))
#+end_src 

#+RESULTS:

   Then basically you have to use the
   =org-trello/install-key-and-token= command. There you will pass
   your mail for your trello account and then just copy api and tokens
   through your browser.

   Note: This command, if accepted, results in a file stored only in
   your disk in ~/.emacs.d/.trello/.el</kbd> (this path may vary
   depending on **user-emacs-directory**).

   I push my .emacs.d. So I added this to the gitignore.

   Then basically there are commands to sync to a =board=. Create a
   new =board=. Sync a =card=, archive a =card= etc.

   With =C-t= on headers you toggle among the available categories on
   your trello board. Instead of classical TODO you would have the
   category such that your header is assigned correctly.
   

   Ok it is working smoothly. The issue is that it is just one
   way. I.e. you can just deal with the cards you create. Not with the
   one others created and assigned to you. 

   Moreover the capabilities are still limited. Try to check in a bit
   to see if it was updated. 

   Good the last step would be to synchronize 


** Timers

   I downloaded [[https://github.com/dakra/tea-timer.el][tea-timer]] manually via git. 

#+begin_src emacs-lisp 
 (add-to-list 'load-path "C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/tea-timer.el/")

 (load "tea-timer")
#+end_src 

#+RESULTS:
: t

*** TODO have as well to fix the echo message

  #+begin_src emacs-lisp 
(defun tea-timer-tea-ready ()
  "Display tea ready message and reset timer."
  (shell-command-to-string (concatenate 'string "echo " tea-timer-message " | terminal-notifier -title Tea-Timer -sound default  -appIcon https://img.icons8.com/ios/452/tea--v1.png"))
  (setq tea-timer--timer nil))
  #+end_src 

  #+RESULTS:
  : tea-timer-tea-ready

  Good you can now set a timer and the terminal notifier will notify
  you when it will be over. You can pass an argument to supply the time
  for the timer with =C-u int tea-timer= where int is an integer with the
  time in minutes.

 #+begin_src emacs-lisp 
 (define-key global-map (kbd "C-c n t") 'tea-timer)
 (define-key global-map (kbd "C-c n s") 'tea-timer-display-remaining-time)
 (define-key global-map (kbd "C-x n c") 'tea-timer-cancel)
 #+end_src 

 #+RESULTS:
 : tea-timer-cancel



* Tramp

  To be implemented using: [[https://cestlaz.github.io/posts/using-emacs-25-tramp/][tramp_tut]].


* Git

** Git Gutter

Signals on the left automatically if you are up to date with your
branch, if there are differences, what is added and what is removed
see:

- [[https://github.com/syohex/emacs-git-gutter/][git gutter]]

- [[https://github.com/syohex/emacs-git-gutter-fringe][git gutter fringe]]

+ add in combo: 

  #+Name: Highlight uncommited lines for Git
  #+BEGIN_SRC emacs-lisp
    ;;Use the diff-hl package to highlight changed-and-uncommitted lines
    ;;when programming.

    ;;(use-package diff-hl
    ;;  :config
    ;;  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    ;;  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
  #+END_SRC

  #+RESULTS: Highlight uncommited lines for Git



* Quickrun

  We can use quickrun package to execute code (if it has
  main). E.g. If you have a java file with main method, it will run
  with the associated shortcut key ~C-c r~ or quickrun
  command. Quickrun has support for several languages.

  #+begin_src emacs-lisp 
(use-package quickrun 
:ensure t
:bind ("C-c r" . quickrun))
  #+end_src 

  #+RESULTS:
  : quickrun
  

* R

#+begin_src emacs-lisp 
;; For babel evaluing in R
(use-package ess
  :ensure t)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(setq ess-use-flymake nil)
(setq ess-eval-visibly-p nil)
(setq ess-use-eldoc nil)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(define-key inferior-ess-mode-map (kbd "C-c 1")  '(lambda () (interactive) (insert "%>%"))) 
#+end_src 

#+RESULTS:
| lambda | nil | (interactive) | (insert %>%) |


* Python 

  Set path to python executable so that emacs can leverage it. This
  step is necessary when operating through Windows OS.

  #+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t)

(use-package virtualenvwrapper
  :ensure t)
  #+END_SRC

  #+RESULTS:

  #+Name: Python Mode and virtual environment activation.
  #+BEGIN_SRC emacs-lisp
;; Ativate elpy package to run python code
(elpy-enable) ;; initialize elpy for python IDE in emacs

;; Activate flycheck instead of flymake from eply package
(when (require 'flycheck  nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; Activate autopep. This integrates with Emacs so that when you save a
;; file trough the -C-x C-s- cmd it will automatically format and correct
;; any PEP8 errors (excluding the ones that you may specify)

;; Did not especially appreciated autopep8. Leave it out.
					;(require 'py-autopep8)
					;(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

;; Integrate the eply mode with the IPython REPL and the Jupyter Notebooks.
;; This will allow to run Jupyter Notebooks that looks  very much like
;; R .rmd files directly on Emacs !after connecting to the notebook online!

(setq python-shell-interpreter "python"
      python-shell-interpreter-args "-i")

;; you do not have ipython in your downloaded zip on windows
;; python-shell-interpreter "ipython"
;; python-shell-interpreter-args "-i --simple-prompt");; uses ipython interpreter

;; Set standard python interpreter as python 3
(setq elpy-rpc-python-command "python")

;; Set up virtual environments emacs connection
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support

;; note that setting `venv-location` is not necessary if you
;; use the default location (`~/.virtualenvs`), or if the
;; the environment variable `WORKON_HOME` points to the right place
(setq venv-location "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/virtual_envs/")

;; ;; Add hook for còmment highlighting.
;; (add-hook 'python-mode-hook 'add-custom-keyw)
  #+END_SRC

  #+RESULTS: Python Mode and virtual environment activation.
  : c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/virtual_envs/

  Good. After installing ipyhton thorugh pip everything is working
  smoothly. Remember to run pip on DOS and not on emacs shell as at the
  moment emacs shell is set to be the shell interacting with the Linux
  partition.

** Pip add pip to the eshell path

   #+begin_src emacs-lisp 
;; Have a variable for it in the variables
;; (add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python/Scripts")
   #+end_src 

** ISSUE after activating venv your interactive pyhton changes to some .exe under the .emacs.d

   See =elpy-config= to check what is set and what is going on. 

   Then basically you do not get all of the installed modules over
   there. 

   This is fine as usually you want to be in that virtual
   environment. 

   What is annoying is that the eshell cannot find the azure-cli
   module that you have installed within your global python.

   I mean have to dig a little bit more into it in order to properly
   understand what is going on.

   Keep it as a note for now.


* Java


  Set the path to the java runtime.

  #+begin_src emacs-lisp 
(setenv "JAVA_HOME"  "C:/JavaServer/jdk-11.0.12+7")
(add-to-list 'exec-path "C:/JavaServer/jdk-11.0.12+7/bin")
  #+end_src 

  #+RESULTS:
  | C:/Dev/git/bin | c:/WINDOWS/system32 | C:/WINDOWS | C:/WINDOWS/System32/Wbem | C:/WINDOWS/System32/WindowsPowerShell/v1.0/ | C:/WINDOWS/System32/OpenSSH/ | C:/Program Files/1E/Client/Extensibility/NomadBranch | C:/Dev/ispell/ispell/bin | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | C:/JavaServer/jdk-11.0.12+7/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python | C:/Users/MARCO.HASSAN/AppData/Local/Microsoft/WindowsApps | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python/Scripts | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 |

  Add the bin executables to the systems variables

  #+begin_src emacs-lisp 
(setq lsp-java-java-path "c:/JavaServer/jdk-11.0.12+7/bin/java.exe")
  #+END_SRC

  #+RESULTS:
  : c:/JavaServer/jdk-11.0.12+7/bin/java.exe
  

* Run Code
  We can use quickrun package to execute code (if it has main). E.g. If you have a java file with main method, it will run with the associated shortcut key ~C-c r~ or quickrun command. Quickrun has support for several languages.

  #+begin_src emacs-lisp
(use-package quickrun 
  :ensure t
  :bind ("C-c r" . quickrun))
  #+end_src

  #+RESULTS:
  : quickrun


* Automatic encryption

  Inspired by Howard Abrams. He sets the option =(setq
  epa-file-select-keys 2)= for automatically encrypting the docs with
  his public key such that he will then be able to de-crypt them using
  his private key. 

  *Notice:* The section leverages the =easy pg= package for GnuPG
  interaction on emacs. The package should  already be installed for
  Emacs >21.4. You can find it as =epg= in the list of your packages.

  Reference it at [[https://www.emacswiki.org/emacs/EasyPG][EasyPG]].

  From this source about [[https://www.gnu.org/software/emacs/manual/html_node/epa/Encrypting_002fdecrypting-gpg-files.html][auto-encryption]] I could understand that a
  similar point holds also for symmetric encryption.

  Setting the parameter below emacs understands directly that it
  should work with symmetric encryption. In fact you are telling epa
  to forget about your public-private keys so to say and therefore the
  option remaining is the one of symmetric encryption.

  #+BEGIN_SRC emacs-lisp
    (setq epa-file-select-keys nil) 
  #+END_SRC

  #+RESULTS:

Very nice org-mode link elaborating some other options, such as just
encrypting some part of the document etc. [[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Encrypting Org Files]].

For versions of GnuPG higher than 2.1 you can set the below to set the
password directly from emacs mini-buffer and not with the opening of a
specific dialogue.
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+END_SRC

#+RESULTS:
: loopback


* Deal with conflicting key bindings

This is an interesting option to deal with key bindings conflicts. The
idea is to create a minor mode with the key bindings you want to have
guaranteed and subsequently solving the conflicts by enabling the
created minor mode.

Notice at the moment not used. But I had to rename already a few key
bindings. I am sure that soon I will have to leverage it and it is
therefore sensible to keep it here already.

#+BEGIN_SRC emacs-lisp
  ;; (defvar my-keys-minor-mode-map
  ;;   (let ((map (make-sparse-keymap)))
  ;;     (define-key map (kbd "C-i") 'some-function)
  ;;     map)
  ;;   "my-keys-minor-mode keymap.")

  ;; (define-minor-mode my-keys-minor-mode
  ;;   "A minor mode so that my key settings override annoying major modes."
  ;;   :init-value t
  ;;   :lighter " my-keys")

  ;; (my-keys-minor-mode 1)
#+END_SRC

#+RESULTS:


* EIN

  Nothing to configure. Apparently it was built-in.

#+begin_src emacs-lisp 
;; (define-key python-mode-map (kbd "C-c s-c") 'ein:edit-cell-save-and-execute)
#+end_src 

#+RESULTS:

Consider [[https://github.com/nnicandro/emacs-jupyter][this package]]. Looks promising.


* Nikola

   #+BEGIN_SRC emacs-lisp
     ;; Tell emacs where is your personal elisp lib dir
     (add-to-list 'load-path "c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-nikola/")
     (add-to-list 'load-path "c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-rst/")
   #+END_SRC

   #+RESULTS:
   | c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-rst/ | c:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/ox-nikola/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/tea-timer.el/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/scimax-ob/ | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-hacks | C:/Users/MARCO.HASSAN/AppData/Roaming/.emacs.d/dired-sidebar | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ag-0.48 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/aggressive-indent-1.10.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-complete-nxml-0.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-complete-1.5.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/auto-yasnippet-0.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/beacon-1.3.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/calfw-1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/calfw-org-1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/counsel-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/doom-modeline-3.2.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/doom-themes-2.1.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/all-the-icons-5.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/elpy-1.35.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/company-0.9.13 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/epkg-3.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/closql-1.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/emacsql-sqlite-3.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/emacsql-3.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ess-18.10.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/expand-region-0.11.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flycheck-31 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flymake-json-0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/flymake-easy-0.10 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/gnuplot-0.8.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-lsp-0.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-3.8.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/helm-core-3.8.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/highlight-indentation-0.7.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/htmlize-1.56 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-mode-1.8.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-navigator-0.1.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/hierarchy-0.7.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/json-snatcher-1.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/julia-mode-0.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-java-3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dap-mode-0.7 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/bui-1.2.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-treemacs-0.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-ui-8.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lsp-mode-8.0.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/magit-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/git-commit-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/magit-section-3.3.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/markdown-mode-2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-alert-0.1.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-bullets-0.2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-pomodoro-2.1.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-wild-notifier-0.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dash-functional-2.19.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/async-1.9.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/alert-1.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/log4e-0.3.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/gntp-0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/org-yt-20180527.245 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/paredit-24 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pkg-info-0.6 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/epl-0.9 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pomodoro-20210225.2118 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/popup-0.5.8 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/powerline-2.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/projectile-2.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pyvenv-1.21 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quelpa-use-package-20201022.946 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quelpa-20210329.839 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/quickrun-2.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/rainbow-delimiters-2.1.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/request-0.3.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ripgrep-0.4.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/shell-switcher-1.0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/shrink-path-0.3.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/f-0.20.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/spinner-1.7.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/swiper-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ivy-0.13.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/transient-0.3.7 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/transpose-frame-0.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/treemacs-2.9.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/cfrs-1.5.4 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/posframe-1.1.2 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ht-2.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/hydra-0.15.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/lv-0.15.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/pfuture-1.9 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/ace-window-0.10.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/avy-0.5.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/try-0.0.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/undo-tree-0.7.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/use-package-2.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/bind-key-2.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/virtualenvwrapper-0.2.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/s-1.12.0 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/dash-2.19.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/vscode-icon-20201214.2327 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/which-key-3.5.3 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/with-editor-3.0.5 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yafolding-0.4.1 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yaml-mode-0.0.15 | c:/Users/marco.hassan/AppData/Roaming/.emacs.d/elpa/yasnippet-0.14.0 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/site-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/site-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/vc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/url | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/textmodes | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/progmodes | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/play | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/org | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/nxml | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/net | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/mh-e | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/mail | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/leim | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/language | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/international | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/image | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/gnus | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/eshell | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/erc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/emulation | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/emacs-lisp | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/cedet | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/calendar | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/calc | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/share/emacs/27.2/lisp/obsolete |

#+BEGIN_SRC emacs-lisp
(require 'ox-publish) ;; built in in org mode. No need to install it.
(require 'ox-nikola)
#+END_SRC

#+RESULTS:
: ox-nikola

 Necessary for posting in org mode. Otherwise you will get bugs when publishing.

 #+begin_src emacs-lisp 
  (use-package htmlize
    :ensure t)
 #+end_src 

 #+RESULTS:

** TODO understand this big function. also correct the path should you ever decide this is interesting

 #+BEGIN_SRC emacs-lisp
  ;; (auto-insert-mode)
  ;; (setq auto-insert-query nil)
  ;; (setq auto-insert-directory "~/templates/")
  ;; (setq auto-insert 'other)

  ;; (defun my/autoinsert-yas-expand ()
  ;;   "Replace text in yasnippet template."
  ;;   (yas-expand-snippet (buffer-string) (point-min) (point-max)))

  ;; (setq auto-insert-alist
  ;; 	(append
  ;; 	 '((("Blogging/org/.*\\.org$" . "org-mode") . ["nikola.org" my/autoinsert-yas-expand])
  ;; 	   (("\\.org$" . "org-mode") . ["template.org" my/autoinsert-yas-expand])
  ;; 	   ) auto-insert-alist))

  ;; (defun auto-export-my-blog ()
  ;;   (let* ((project-plist (cdr (assoc "blog" org-publish-project-alist)))
  ;; 	   (project-dir (expand-file-name
  ;; 			 (plist-get project-plist :base-directory))))
  ;;     (save-excursion
  ;; 	(if (string= project-dir (file-name-directory buffer-file-name))
  ;; 	    (org-publish-current-file)))))

  ;; (add-hook 'after-save-hook 'auto-export-my-blog)

  ;; (add-to-list 'org-publish-project-alist
  ;; 	       '("blog" . (:base-directory "~/Desktop/Blogging/org/"
  ;; 					   :base-extension "org"
  ;; 					   :publishing-directory "~/Desktop/Python/virtual_envs/mypage/posts/"
  ;; 					   :publishing-function (org-nikola-publish-to-rst)
  ;; 					   :body-only t)))
 #+END_SRC

 #+RESULTS:
 | blog | :base-directory | ~/Desktop/Blogging/org/ | :base-extension | org | :publishing-directory | ~/Desktop/Python/virtual_envs/mypage/posts/ | :publishing-function | (org-nikola-publish-to-rst) | :body-only | t |


* Magit

#+begin_src emacs-lisp 
(use-package magit
  :ensure t
  :defer t) ;; recall to download it trough MELPA at first
#+end_src 

#+RESULTS:

Enable magit interface on global mode.

#+begin_src emacs-lisp 
(global-set-key (kbd "C-x g") 'magit-status)
#+end_src 

#+RESULTS:
: magit-status


** Magit git exe
   :PROPERTIES:
   :ID:       32a70726-ef00-4372-bfb4-753610e26cbe
   :END:

   Add you git executable to the magit interface.

   #+begin_src emacs-lisp 
   (setq magit-git-executable "C:/Dev/git/bin/git")
   #+end_src 

   #+RESULTS:
   : C:/Dev/git/bin/git

   Working like a charm.

   Had as well to add diffUtils as otherwise the =diff= part was not
   there and this will be quite essential in the new experience. 

#+BEGIN_SRC emacs-lisp
(setq diff-path "C:/Dev/git/usr/bin")
(setq exec-path
      '(diff-path)) ;; check how the logic is different. basically you
		    ;; are setting a variable here. if you check at
		    ;; the variables C-h v for both diff-path and
		    ;; exec-path you will start to understand the
		    ;; issue.
#+END_SRC

#+RESULTS:
| diff-path |

#+BEGIN_SRC emacs-lisp
;; (setq ediff-diff-program "c:/Dev/git/usr/bin/diff.exe")
#+END_SRC


*** ISSUE performance                                              :noexport:

    apparently emacs is full of performance issues when working with
    it. 

    the issue specific to magit might the the poor implemntation of
    forking [[https://www.reddit.com/r/emacs/comments/g4x2gz/why_the_hell_is_magit_so_slow_on_windows/fo6uwg2/][according to this thread]].

    Everyone recommends working with WSL and it. I see the point for
    that. The issue is that when working in a financial institution
    you have tons of constraints. I think the best thing would be to
    have docker up and running and work my way from there. 

    I make a note for that on my agenda. Come back to it at some later
    point.

    -------------------

    So much of it was related to the poor performance of the previous
    laptop. 

    Forget about it to this stage and just come back to it at a later
    stage. 

*** Try libgit2 as a solution in the meanwhile                     :noexport:
    
    It is not an emacs package. it is an entire implementation of git
    using C. Or something like that. 

    As you do not have set up a correct C compiler at this point this is
    not a solution. This is the usual issue with this working
    environment. To do that would equally cost tons of time. 


* Projectile

  This can be used to search within a project in all files etc.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
  ;; Later on, after loading exec-path-from-shell package

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (setq projectile-require-project-root nil)
#+END_SRC

#+RESULTS:

#+begin_src emacs-lisp 
 (global-set-key (kbd "C-x s-r") 'projectile-next-project-buffer)
 (global-set-key (kbd "C-x s-l") 'projectile-previous-project-buffer)
#+end_src 

#+RESULTS:
: projectile-previous-project-buffer

  Install =ag= to search with it in projectile

#+begin_src emacs-lisp 
(use-package ag
  :ensure t)
#+end_src 

#+RESULTS:

  Nice the projectile search is working like a charm. With =ag= it is
  much faster than with =grep= also the output is more easy to
  navigate. I would always go with it. 

  Note that you have to better understand how to restrict the
  search. I.e. ignore some repositories etc. Theoretically you can do
  that inserting things to be ignored in a =.projectile= file. Up to
  now it did not work. I think due to some conflicts with =.git*=
  files (see here [[https://forsooth.org/posts/projectile-ignore-directories/index.html][possible reference]]). Understand better at some point
  if it becomes a priority.

** COMMENT Org Projectile

Adds the possibility to edit org todos files via capture in a default
org file storing todos for the specific project. Essentially the same
as org capture at projectile level.

In order to use it you have first to create the =tasks.org= file in
the correct location and finally to use the =C-c n p= shortcut below.

Note that actually you can choose the location of the =tasks.org=
file. Opens a projectile-completing-read that allows the selection of
a project heading under which to store the input that is subsequently
captured in an org-capture buffer.

#+begin_src emacs-lisp 
(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c n c" . org-projectile-capture-for-current-project))
  :config
  (progn
     (org-projectile-per-project)
     (setq org-projectile-per-project-filepath "tasks.org")
     (setq org-projectile-projects-file  ;; adds to all of your project such files
           "tasks.org")
     (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; so that you can add them all to your agenda
     (setq org-agenda-skip-unavailable-files t) ;; note the above add
						;; a taks.org in all
						;; of your
						;; projects. remove
						;; entries where you
						;; do not have such
						;; file with this
						;; command
    (setq org-agenda-files (delq nil (delete-dups (org-agenda-files)))) ;; deletes duplicates - whatever the reason might be
    (setq org-projectile-capture-template "\n** TODO %?\n:PROPERTIES:\n:WILD_NOTIFIER_NOTIFY_BEFORE: 30 10 5\n:END:")
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)
#+end_src 

#+RESULTS:
: org-projectile-capture-for-current-project


#+begin_src emacs-lisp 
(defun agenda_remove_duplicates()
 (interactive)
 (setq org-agenda-files (delq nil (delete-dups (org-agenda-files)))))
#+end_src 

#+RESULTS:
: agenda_remove_duplicates

Also add to projects default notifications settings.


To check the files are set correctly call the below

#+begin_src emacs-lisp 
;; (org-projectile-todo-files)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
;; (org-agenda-files)
#+end_src 

#+RESULTS:

something causes duplciates create function for that


* Language Server

** Disable ansi color in compilation mode

   This will help eliminate weird escape sequences during compilation
   of projects.

   #+begin_src emacs-lisp

(defun my/ansi-colorize-buffer ()
  (let ((buffer-read-only nil))
    (ansi-color-apply-on-region (point-min) (point-max))))

(use-package ansi-color
  :ensure t
  :config
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
  )
   #+end_src

   #+RESULTS:
   : t


** Dap Mode

Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your
program. Below we will integrate ~dap-mode~ with
~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various
options and jump through code at runtime. After we install dap-mode we
will also install ~dap-java~.

#+begin_src emacs-lisp
;; (use-package dap-mode
;;   :ensure t
;;   :after (lsp-mode)
;;   :functions dap-hydra/nil
;;   :config
;;   (require 'dap-java)
;;   :bind (:map lsp-mode-map
;;          ("<f5>" . dap-debug)
;;          ("M-<f5>" . dap-hydra))
;;   :hook ((dap-mode . dap-ui-mode)
;;     (dap-session-created . (lambda (&_rest) (dap-hydra)))
;;     (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

;; (use-package dap-java :ensure nil)
#+end_src

#+RESULTS:


** Treemacs

Treemacs provides UI elements used for LSP UI. Let's install
lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to
show error list.

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :config 
 (add-hook 'treemacs-mode-hook
	   (lambda ()
	     (message "treemacs-mode-hook `%s'" (current-buffer))
	     (text-scale-adjust -1)
	     ))
  (treemacs-resize-icons 20)
  :after (lsp-mode))
#+end_src

#+RESULTS:
: t

All good to change the window size, go on the treemacs window and use
=t w=.  Then you will unblock the fix size and it will be possible for
you to resize. Otherwise work with =treemacs-decrease-width= mapped to
=<=.

Note that you can adjust the scale in your treemacs as in any other
buffer in emacs with =C-x -= or =C-x +=.


** LSP UI

LSP UI is used in various packages that require UI elements in
LSP. E.g ~lsp-ui-flycheck-list~ opens a windows where you can see
various coding errors while you code. You can use ~C-c l T~ to toggle
several UI elements. We have also remapped some of the xref-find
functions, so that we can easily jump around between symbols using
~M-.~, ~M-,~ and ~M-?~ keys.

#+begin_src emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+end_src

#+RESULTS:

Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]]  to see what other parameters are provided.


** Helm LSP

Helm-lsp provides various functionality to work with the code. E.g
Code actions like adding *getter, setter, toString*, refactoring
etc. You can use ~helm-lsp-workspace-symbol~ to find various symbols
(classes) within your workspace. 

LSP's built in symbol explorer uses ~xref-find-apropos~ to provide
symbol navigation. Below we will replace that with helm version. After
that you can use ~C-c l g a~ to find workspace symbols in a more
intuitive way. 

#+begin_src emacs-lisp
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+end_src

#+RESULTS:


** Install LSP Package

Let's install the main package for lsp. Here we will integrate lsp
with which-key. This way, when we type the prefix key ~C-c l~ we get
additional help for compliting the command.

#+begin_src emacs-lisp
(use-package lsp-mode
:ensure t
:hook (
   (lsp-mode . lsp-enable-which-key-integration)
   (java-mode . #'lsp-deferred)
   (python-mode . lsp)
)
:config 
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
    (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
)
#+end_src

#+RESULTS:
| lsp-mode |

#+begin_src emacs-lisp 
(setq lsp-keymap-prefix "C-c C-x l")              ; this is for which-key integration documentation, need to use lsp-mode-map

(setq lsp-enable-file-watchers nil)
(setq read-process-output-max (* 1024 1024))  ; 1 mb
(setq lsp-completion-provider :capf)
(setq lsp-idle-delay 0.900)      ; note that it must be lower than 0.2 or higher than 0.8 otherwise you get errors. 
#+end_src 

#+RESULTS:
: 0.5

You can start LSP server in a java project by using ~C-c l s s~. Once
you type ~C-c l~ ~which-key~ package should guide you through rest of
the options. In above setting I have added some memory management
settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if
you find *lsp-mode* sluggish in your computer. 


** LSP Java

This is the package that handles server installation and session
management. 

#+begin_src  emacs-lisp
(use-package lsp-java 
:ensure t
:config (add-hook 'java-mode-hook 'lsp))
#+end_src

#+RESULTS:

** Workaround 

   Note that I was having issues with the lsp-java server. It took me
   quite some time to fix the problem. The issue was that everytime I
   was jumping to a file in my project non-directly using lsp
   functions - say using projectile-search functionality or treemacs
   the lsp would not start and I was getting a
   =textdocument/highlight= error. 

   I decided to switch it off and now everything is working correctly

   #+begin_src emacs-lisp 
(setq lsp-enable-symbol-highlighting nil)
   #+end_src 
   
** Multiproject Problem opens all of the projects you worked with

   Check at the [[https://issueexplorer.com/issue/emacs-lsp/lsp-java/320][following url]] to understand the issue.

   #+BEGIN_SRC emacs-lisp
(advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))
   #+END_SRC

   #+RESULTS:

   It is working now. Check also at the [[https://github.com/emacs-lsp/lsp-mode/discussions/3095][following discussion]] to
   understand more.

   Just the single project that you open is shown there in the errors
   sections now in the =lsp-ui-flycheck-list=. If you add a second one
   this is also added to the list in the sense that is managed by the
   same server connection. The only issue is that if you close the
   file it stays in the server connection. This is not ideal and would
   have to sort it somehow. 

   But basically now you have all of the features you desired. Just
   have to check the last thing with the debugger but basically you
   are there. 

   You can now start to run your smaller projects in emacs and start
   to get up and running with it. 


** Lsp Python

   In order to use the language server protocol in python you can
   install the server via pip.

   [[https://www.mattduck.com/lsp-python-getting-started.html#:~:text=The%20most%20popular%20LSP%20client,packages%20like%20Flycheck%20and%20Company.][This]] is a good reference. 

   Note that the =python-language-server= was mantained by
   palantir. Seems that now the default choice is =python-lsp-server=.
   
* Which key

#+begin_src emacs-lisp 
(use-package which-key
  :config
  (which-key-mode))
#+end_src 

#+RESULTS:
: t

Advice on the shortcuts available.


* YAML

#+begin_src emacs-lisp 
(use-package yaml-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+end_src 

#+RESULTS:
: ((\.yml\' . yaml-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (.*\.ipynb\' . ein:ipynb-mode) (\.lsp\' . XLS-mode) (\.ado\' . STA-mode) (\.do\' . STA-mode) (\.SSC\' . S-mode) (\.ssc\' . S-mode) (\.[qsS]\' . S-mode) (\.sp\' . S-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.[Rr]out . R-transcript-mode) (\.[sS]nw\' . Snw-mode) (\.[rR]nw\' . Rnw-mode) (CITATION\' . R-mode) (NAMESPACE\' . R-mode) (\.[rR]profile\' . R-mode) (\.[rR]\' . R-mode) (/R/.*\.q\' . R-mode) (\.hat\' . omegahat-mode) (\.omg\' . omegahat-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.json$ . json-mode) (\.jl\' . julia-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts$ . typescript-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode))


* Json

#+begin_src emacs-lisp 
(use-package json-mode
  :ensure t)

(use-package flymake-easy
  :ensure t)

(use-package flymake-json
  :ensure t)

(global-set-key (kbd "C-c v") 'flymake-json-load)
(add-hook 'json-mode-hook 'flymake-json-load)
#+end_src 

#+RESULTS:
| flymake-json-load |


This is a nice option. It will show your json as a tree and you can
observe the structure of the json in there and navigate it in such a
way.

#+begin_src emacs-lisp :async t
;; (use-package json-navigator
;;   :ensure t)
#+end_src 

#+RESULTS:
: t

With yafolding you will be able to fold in and out the json documents.

#+begin_src emacs-lisp 
(use-package yafolding
  :quelpa (yafolding :fetcher github :repo "emacsmirror/yafolding")
  :ensure t)
#+end_src 

#+RESULTS:

#+begin_src emacs-lisp 
(add-hook 'json-mode-hook
	    (local-set-key (kbd "C-c h")
			   'yafolding-hide-element)
	    )
#+end_src 

#+RESULTS:
| yafolding-hide-element | flymake-json-load |

** TODO some path stories you need to understand. why did you do it? - note level 1 header :noexport:

 #+begin_src emacs-lisp 
;; (setenv "PATH" (concat (getenv "PATH") ":/Users/marcohassan/.nvm/versions/node/v8.9.0/bin/"))
;; (setq exec-path (append exec-path '("/Users/marcohassan/.nvm/versions/node/v8.9.0/bin/")))
 #+end_src 

 #+RESULTS:
 | C:/Dev/git/bin | c:/WINDOWS/system32 | C:/WINDOWS | C:/WINDOWS/System32/Wbem | C:/WINDOWS/System32/WindowsPowerShell/v1.0/ | C:/WINDOWS/System32/OpenSSH/ | C:/Program Files/1E/Client/Extensibility/NomadBranch | C:/Dev/ispell/ispell/bin | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | C:/JavaServer/jdk-11.0.12+7/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python | C:/Users/MARCO.HASSAN/AppData/Local/Microsoft/WindowsApps | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/python/Scripts | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 | /Users/marcohassan/.nvm/versions/node/v8.9.0/bin/ |


 #+begin_src emacs-lisp 
;; (getenv "PATH")
 #+end_src 


* XML 

Some configuration was taken from [[https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-8-1][this link]].
You can refer it if needed.

#+begin_src emacs-lisp 
(add-to-list 'auto-mode-alist
             (cons (concat "\\." (regexp-opt
                                  '("xml") t)
                           "\\'") 'nxml-mode))
(when (> emacs-major-version 21)
  (setq magic-mode-alist3
        (cons '("<\\?xml " . nxml-mode) magic-mode-alist)))
(fset 'xml-mode 'nxml-mode)
(fset 'html-mode 'nxml-mode)
(require 'rng-loc nil t)
#+end_src 

#+RESULTS:
: rng-loc

#+begin_src emacs-lisp 
(add-hook 'nxml-mode-hook (lambda() (hs-minor-mode 1)))

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>" ;; regexp for starset block
               "-->\\|</[^/>]*[^/]>" ;; regexp for end block
               "<!--"
               nxml-forward-element
               nil))

(defun lgfang-toggle-level ()
  "mainly to be used in nxml mode"
  (interactive) (hs-show-block) (hs-hide-level 1))
#+end_src 

#+RESULTS:
: lgfang-toggle-level

#+begin_src emacs-lisp 
(defun nxml-where ()
  "Display the hierarchy of XML elements the point is on as a path."
  (interactive)
  (let ((path nil))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (< (point-min) (point)) ;; Doesn't error if point is at beginning of buffer
                    (condition-case nil
                        (progn
                          (nxml-backward-up-element) ; always returns nil
                          t)
                      (error nil)))
          (setq path (cons (xmltok-start-tag-local-name) path)))
        (if (called-interactively-p t)
            (message "/%s" (mapconcat 'identity path "/"))
          (format "/%s" (mapconcat 'identity path "/")))))))
#+end_src 

#+RESULTS:
: nxml-where


#+begin_src emacs-lisp 
(defun nxml-pretty-print (beg end &optional arg)
  "Reformat the region between BEG and END.
    With optional ARG, also auto-fill."
  (interactive "*r\nP")
  (let ((fill (or (bound-and-true-p auto-fill-function) -1)))
    (sgml-mode)
    (when arg (auto-fill-mode))
    (sgml-pretty-print beg end)
    (nxml-mode)
    (auto-fill-mode fill)))
#+end_src 

#+RESULTS:
: nxml-pretty-print

Create shortcuts.

#+begin_src emacs-lisp 
;; define keyboard shortcuts for special mode
;; (eval-after-load "nxml-mode"
;;   (progn 
;;      (define-key nxml-mode-map (kbd "C-c C-'") 'lgfang-toggle-level)
;;      (define-key nxml-mode-map (kbd "C-c C-w") 'nxml-where)
;;      (define-key nxml-mode-map  (kbd "C-c C-p") 'nxml-pretty-print)
;;   )
;; )
#+end_src 

#+RESULTS:

Use autocomplete nxml which should be a good autocompletor.

#+begin_src emacs-lisp 
(use-package auto-complete-nxml
  :ensure t)

;; If you want to start completion manually from the beginning
(setq auto-complete-nxml-automatic-p nil)

(add-hook 'nxml-mode-hook 'auto-complete-mode)
#+end_src 

#+RESULTS:
| auto-complete-mode | (lambda nil (hs-minor-mode 1)) | auto-complete-nxml-setup |


* Inline online images


#+begin_src emacs-lisp 
 (use-package org-yt
   :quelpa (org-yt :fetcher github :repo "TobiasZawada/org-yt"))
 #+end_src 

 #+RESULTS:

#+begin_src emacs-lisp 
(require 'org-yt)
#+end_src 

#+RESULTS:
: org-yt

#+begin_src emacs-lisp 
(defun org-image-link (protocol link _description)
  "Interpret LINK as base64-encoded image data."
  (cl-assert (string-match "\\`img" protocol) nil
             "Expected protocol type starting with img")
  (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
    (cl-assert buf nil
               "Download of image \"%s\" failed." link)
    (with-current-buffer buf
      (goto-char (point-min))
      (re-search-forward "\r?\n\r?\n")
      (buffer-substring-no-properties (point) (point-max)))))

(org-link-set-parameters
 "imghttp"
 :image-data-fun #'org-image-link)

(org-link-set-parameters
 "imghttps"
 :image-data-fun #'org-image-link)
#+end_src 

#+RESULTS:

To use it you have to use the following syntax then. You have to use
=https= if it protected and =http= otherwise.

#+begin_example
[[imghttps  ://bigdataforeng2020.blob.core.windows.net/exercise07/marketplace.png]]
#+end_example


* Quelpa - Dired-Plus Example

  CHeck What dired+ was. Takes a while to load it here.
   
 #+begin_src emacs-lisp 
 ;; (use-package dired+
 ;;   :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus"))
 #+end_src 

 #+RESULTS:

 #+begin_src emacs-lisp 
 ;; (diredp-toggle-find-file-reuse-dir 1)
 #+end_src 

 #+RESULTS:


* Add Ripgrep

  This is used for searching as you usually do via grep on unix
  systems. 

  You can then use the search via ripgrep in projectile to search for
  specific implementations in your projects when lsp is failing for
  some reason.

#+begin_src emacs-lisp 
(use-package ripgrep
  :ensure t
  :defer t) ;; recall to download it trough MELPA at first
#+end_src 

#+RESULTS:
  
  #+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu")
  #+END_SRC

  #+RESULTS:
  | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | c:/WINDOWS/system32 | C:/WINDOWS | C:/WINDOWS/System32/Wbem | C:/WINDOWS/System32/WindowsPowerShell/v1.0/ | C:/WINDOWS/System32/OpenSSH/ | C:/Program Files/1E/Client/Extensibility/NomadBranch | C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | C:/JavaServer/jdk-11.0.12+7/bin | C:/Users/MARCO.HASSAN/Desktop/programs_executables/Python38-32 | C:/Users/MARCO.HASSAN/Desktop/programs_executables/Python38-32/Scripts | C:/Users/MARCO.HASSAN/Desktop/programs_executables/Python38-32/Lib/site-packages | C:/Users/MARCO.HASSAN/Desktop/programs_executables/awk/bin | C:/Dev/azure_data_studio/bin | C:/Users/MARCO.HASSAN/Desktop/test_emacs_doom/.emacs.d/bin | C:/Users/MARCO.HASSAN/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | C:/Dev/git/bin | C:/Users/MARCO.HASSAN/Desktop/programs_executables/apache-maven-3.8.2/bin | C:/Users/MARCO.HASSAN/Desktop/software-for-import-on-zurich/hunspell2/bin | C:/Users/MARCO.HASSAN/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ | C:/Users/MARCO.HASSAN/Desktop/programs_executables/gradle-7.1.1/bin | C:/Users/marco.hassan/AppData/Local/Microsoft/WindowsApps | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/hunspell/bin | C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/ |


* Add to execution Path and $PATH 

So note that this is 

Here you add imporatant executables on your PATH.

  #+BEGIN_SRC emacs-lisp
;; Graphviz - in order to make the plantuml charts
(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin")

;; gradle 
(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin")

(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32")

(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ImageMagick/")

(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/python.exe")

(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/httpd-2.4.53-win64-VS16/Apache24/bin")

(add-to-list 'exec-path "c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/sqlite-tools-win32-x86-3380300/sqlite-tools-win32-x86-3380300/")
  #+END_SRC

  #+RESULTS:
  | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/sqlite-tools-win32-x86-3380300/sqlite-tools-win32-x86-3380300/ | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/httpd-2.4.53-win64-VS16/Apache24/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/python.exe | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/ImageMagick/ | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32 | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin | c:/Users/marco.hassan/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | c:/WINDOWS/system32 | c:/WINDOWS | c:/WINDOWS/System32/Wbem | c:/WINDOWS/System32/WindowsPowerShell/v1.0 | c:/WINDOWS/System32/OpenSSH | c:/Program Files/1E/Client/Extensibility/NomadBranch | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin | c:/JavaServer/jdk-11.0.12+7/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Scripts | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/Python38-32/Lib/site-packages | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/awk/bin | c:/Dev/azure_data_studio/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/test_emacs_doom/.emacs.d/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu | c:/Dev/git/bin | c:/Dev/git/usr/bin | c:/Dev/apache-maven-3.8.2/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/software-for-import-on-zurich/hunspell2/bin | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin | c:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64 | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin | c:/Users/marco.hassan/AppData/Local/Microsoft/WindowsApps | . | c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/libexec/emacs/27.2/x86_64-w64-mingw32 |

  Ok so this is what you should do... and then remove all of the
  exec-path stuff. 

#+BEGIN_SRC emacs-lisp
(getenv "PATH")
#+END_SRC

#+RESULTS:
: C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\1E\Client\Extensibility\NomadBranch;C:\Program Files\Microsoft\Azure Functions Core Tools\;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Emacs\bin;C:\JavaServer\jdk-11.0.12+7\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\Python38-32;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\Python38-32\Scripts;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\Python38-32\Lib\site-packages;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\awk\bin;C:\Dev\azure_data_studio\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\test_emacs_doom\.emacs.d\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\ripgrep-13.0.0-x86_64-pc-windows-gnu;C:\Dev\git\bin;C:\Dev\git\usr\bin;C:\Dev\apache-maven-3.8.2\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\dotnet-sdk-3.1.416-win-x64;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\software-for-import-on-zurich\hunspell2\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\software-for-import-on-zurich\Graphviz\bin;C:\Users\marco.hassan\AppData\Local\Programs\MiKTeX\miktex\bin\x64\;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\gradle-7.1.1\bin;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\ImageMagick;C:\Users\marco.hassan\OneDrive - Zurich Insurance\Desktop\programs_executables\azureFunctions\Azure.Functions.Cli.win-x64.4.0.3971;

#+BEGIN_SRC emacs-lisp

;; (setenv "PATH" (concat (getenv "PATH") ":/sw/bin"))

;; (setq "PATH" ("c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Emacs/bin:")) ;; 'C:/JavaServer/jdk-11.0.12+7/bin':'C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/test_emacs_doom/.emacs.d/bin':'C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/ripgrep-13.0.0-x86_64-pc-windows-gnu':'C:/Dev/git/bin':'C:/Dev/apache-maven-3.8.2/bin':'C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/software-for-import-on-zurich/Graphviz/bin':'C:/Users/MARCO.HASSAN/AppData/Local/Programs/MiKTeX/miktex/bin/x64/':'C:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/Desktop/programs_executables/gradle-7.1.1/bin'"))
#+END_SRC


** TODO understand if you want to refactor the entire path stuff in here. 
   SCHEDULED: <2021-12-20 Mo. 09:00>

   like this you would have a single source of truth. 

   and you would see the entire executable programs that you need on
   one shot. 

   do it at some point. 

** TODO important todo.. have finally understood the reason of the issues

   check at [[https://emacs.stackexchange.com/questions/43761/correct-way-to-set-exec-path][this entry]] - refactor when you have time and keep order.

   consider then [[https://www.emacswiki.org/emacs/ExecPath][this function]].

   check also [[https://emacs.stackexchange.com/questions/461/configuration-of-eshell-running-programs-from-directories-in-path-env-variable][this]] might be useful



* Shell Configs


** Shell

   Configure your shell to work with bash. This you get when you
   download git for windows. Either in the portable version or not.


#+begin_src emacs-lisp 
(setq explicit-shell-file-name "c:/Dev/git/bin/bash.exe")
#+end_src 

#+RESULTS:
: c:/Dev/git/bin/bash.exe

    This fixes some issues, cause for some reason the default program
    that the shell was initializing was not really getting the
    variables on your path. 

    So some programs calls for instance =org-latex-pdf-process= were
    not really getting the processes they should run. 

    
    


** Eshell 

 Fancy Prompt
 #+BEGIN_SRC emacs-lisp
   (defun with-face (str &rest face-plist)
     (propertize str 'face face-plist))

   (defun shk-eshell-prompt ()
     (let ((header-bg "#292929"))   
       (concat
	(with-face (concat (eshell/pwd) " ") :foreground "green")
	(with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :foreground "#888")
	(with-face
	 (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) ""))
	(with-face "\n")
	(with-face user-login-name :foreground "indian red")
	"@"
	(with-face "localhost" :foreground "sea green")
	(if (= (user-uid) 0)
	    (with-face " #" :foreground "red")
	  " $ "))))

   (setq eshell-prompt-function 'shk-eshell-prompt)
   (setq eshell-highlight-prompt nil)
 #+END_SRC

 #+RESULTS:

 A built in solution for search of history commands.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'eshell-mode-hook
	     (lambda ()
	       (local-set-key (kbd "C-c h")
			      (lambda ()
				(interactive)
				(insert
				 (ido-completing-read "Eshell history: "
						      (delete-dups
						       (ring-elements eshell-history-ring))))))
	       ))
 #+END_SRC

 #+RESULTS:
 | (lambda nil (local-set-key (kbd C-c h) (lambda nil (interactive) (insert (ido-completing-read Eshell history:  (delete-dups (ring-elements eshell-history-ring))))))) | tramp-eshell-directory-change | ess-r-package-activate-directory-tracker |

Open a new eshell windows

#+begin_src emacs-lisp 
(defun eshell-new()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))
#+end_src 

#+RESULTS:
: eshell-new

Shortcut to open eshell

#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-j") 'eshell-new)
#+end_src 

#+RESULTS:
: eshell-new

   
** Shell Switcher

   If you have multi-shell this is theoretically not strictly
   necessary as it is more less the same functionality.

   #+begin_src emacs-lisp 
 (use-package shell-switcher
   :quelpa (shell-switcher :fetcher github :repo "DamienCassou/shell-switcher")
   :config
   (shell-switcher-mode)
   )
   #+end_src 

   #+RESULTS:
   : t

   Such that new created shells are automatically recognized as
   shell-switcher shells

   #+begin_src emacs-lisp 
(add-hook 'eshell-mode-hook 'shell-switcher-manually-register-shell)
   #+end_src 

   #+RESULTS:
   | shell-switcher-manually-register-shell | (lambda nil (local-set-key (kbd C-c h) (lambda nil (interactive) (insert (ido-completing-read Eshell history:  (delete-dups (ring-elements eshell-history-ring))))))) | tramp-eshell-directory-change | ess-r-package-activate-directory-tracker |

   Working like a charm. Note that there is a difference between =C-'=
   and continuing with ='= vs. typing =C-'= again. I.e. if you type
   the second again you will continuously jump across the same two
   shells. In comparison if you continue with ='= you will jump across
   all of the existing shells.
   

** Decide shell to open at start-up

 #+begin_src emacs-lisp 
 (cd "c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/")
 (eshell)
 (delete-other-windows)
 #+END_SRC

 #+RESULTS:
 : c:/Users/MARCO.HASSAN/OneDrive - Zurich Insurance/


** Open last opened terminal in term mode

 #+begin_src emacs-lisp 
 (defun switch-to-most-recent-terminal ()
   (interactive)
   (let (found)
     (catch 'done
       (mapc (lambda (x)
               (when (with-current-buffer x (eq major-mode 'eshell-mode))
                 (switch-to-buffer x)
                 (setq found t)
                 (throw 'done nil)))
             (buffer-list))
       (unless found (message "not found")))))
 #+end_src 

 #+RESULTS:
 : switch-to-most-recent-terminal

 #+begin_src emacs-lisp 
 (global-set-key (kbd "C-c s-s") 'switch-to-most-recent-terminal)
 #+end_src 

 #+RESULTS:
 : switch-to-most-recent-terminal


   
* Select theme at start up

#+begin_src emacs-lisp 
(call-interactively 'dark/doom)
#+end_src 

#+RESULTS:
: t


* Test-Mode

** Use Emacsclient to speed up start up of Emacs

   Idea: run at the beginning an emacs server on the local machine and
   let the emacs instances connect to the server. Like this you will not
   need to run the entire =init= file each time you call emacs.

   The best implementation is then to start the emacs deamon letting the
   server start right after booting. Like this you will always have the
   emacs server running in the background at PC start-up.

   #+BEGIN_SRC emacs-lisp
   ;; (server-start)
   #+END_SRC

   #+RESULTS:

   /Notice:/ When an emacs server is running, closing the last Emacs
   instance will leave the server running.


