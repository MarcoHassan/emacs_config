* Notes
Note that this is an experimentation integrating WSL on window emacs.

In general there are too many conflicts. The major ones discovered to
the point are the issues with "sudo orders". These cannot be properly
integrated in this WSL-Windows Emacs. Moreover this solution does not
manage to integrate properly git. Git repositories are not recognized
as such and difficulties arise when pulling and pushing.

Note however that when installing emacs on the Ubuntu partition and
calling emacs in that partition everything integrates well.

This is therefore a very nice and powerful feature and it suggest to
switch to this solution. 



* General sources

As a general resources for generating my emacs configuration I mainly
refer to [[https://cestlaz.github.io/tags/emacs/page/6/][emacs_intro_&packages]], [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz emacs config]]. Harry
Schwartz shared a video on the internet containing a good introduction
to the org mode and suggested the option of writing the emacs
configuration file as =org= file as I am currently doing, which I
enjoy a lot and believe it gives a great overview over the document.

** TODO watch [[https://www.youtube.com/watch?v=GK3fij-D1G8][this]] incredible video describing literate programming within Org-mode and try to incorporate the mode
   :PROPERTIES:
   :ID:       e630a79e-6f1e-48c8-9594-744ac1f36184
   :END:


* Increase cache allowed

From Howard Abraham...

With a long history of working on small machines without gigabytes of RAM, we might as well let Emacs be the beast it has always dreamed.

First, let’s increase the cache:

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
#+END_SRC


* Shortcut to Configuration File

This section creates a shortcut key to go to this =emacs=
configuration file without having to search for the directory.
#+BEGIN_SRC emacs-lisp
    (defun hrs/visit-emacs-config ()
      (interactive)
      (find-file "~/Desktop/emacs_config/emacs_configuration.org"))

    (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)

#+END_SRC



* Ensure Use-package

This package assure that you do not have to download all of the
packages manually and it downloads all of the necessary packages
automatically and open them with the predefined configuration options.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t


* Make sure you can use standard lisp functions and macros

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC


* Enable MELPA package manager

  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			(not (gnutls-available-p))))
	   (proto (if no-ssl "http" "https")))
      ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
      (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
      (when (< emacs-major-version 24)
	;; For important compatibility libraries like cl-lib
	(add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
    (package-initialize)
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(package-selected-packages
       (quote
	(org-bullets htmlize auctex virtualenvwrapper pyenv-mode ein py-autopep8 flycheck elpy monokai-theme))))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )
  #+END_SRC


* Enable Marmalade and Org ELPA package manager

Org ELPA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((marmalade . http://marmalade-repo.org/packages/) (marmalade . http://orgmode.org/packages/) (gnu . https://elpa.gnu.org/packages/) (melpa-stable . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))

Marmalade
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("marmalade" .  "http://marmalade-repo.org/packages/"))
#+END_SRC





* Basic Customization

** Define tilde for windows OS

#+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook
	       (lambda () (global-set-key (kbd "M-ì") "~")))
#+END_SRC
** Set global encoding 

#+BEGIN_SRC emacs-lisp
;; UTF-8 as default encoding
(set-language-environment "utf-8")
(prefer-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC

** No beeps, scrollbar etc.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)             ;; Get rid of the beeps

(when (window-system)
  (tool-bar-mode 0)               ;; Toolbars were only cool with XEmacs
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (scroll-bar-mode -1))            ;; Scrollbars are waste screen estate
#+END_SRC

#+RESULTS:

** Highlight color

   Set highlight color when activate the "mark set" to be a different
   color than gray as it is poorly recognizable with the theme and the
   line highlighting mode.

#+BEGIN_SRC emacs-lisp
      (defun color-highlight ()
	(interactive)
	(set-face-attribute 'region nil :background "indian red" :foreground "grey5"))
#+END_SRC
#+RESULTS:
: color-highlight

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'color-highlight) ;; to actiavte it when starting emacs.
#+END_SRC

Create general function to set transparency.
#+BEGIN_SRC emacs-lisp
 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** Two very handy tricks from Howard Abraham

   - Replace yes-no answers with y-n. 

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   - Fix the scrolling =C-v= and =M-v= such that the cursor will
     return to the previous scrolling position if going down and up.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
          scroll-preserve-screen-position t)
   #+END_SRC

   #+RESULTS:
   : t

** Undo Redo Tree 
   
   This is a very nice package that allows you to expand on the basics
   emacs undo functionalities. In emacs you can undo with =C-_= or
   =C-/=.

   The package undo-tre allows you to have the redo option with
   =C-?=.

   Moreover it allows you to visualize a tree with the changes you
   have done and to move interactively across it to go back to a given
   point in you history. 

   If you code something and then cancel that something and code
   something else, the undo tree will show a branch at this stage
   with the two versions of your edit.

   Require the package and enable it globally.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+END_SRC

** Parenthesis

   Try this package for parenthesis highlighting. 

   Learn how to quickly operate with parenthesis using predit through
   the following link [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][predit-tutorial.]]

   #+BEGIN_SRC emacs-lisp
     (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
   #+END_SRC

   #+RESULTS:
   : enable-paredit-mode

   Despite being super useful paredit unfortunately conflicts with the
   usual <DEL>. This will not allow to cancel entire chunks of
   highlighted text. Set another key binding for paredit delete.

   Notice the code below removes the paredit delete altogether because
   I do not find it that useful. Another option would just to add
   another line shifting the paredit =<DEL>= to some other key binding. 

#+BEGIN_SRC emacs-lisp
  (eval-after-load "paredit" '(define-key paredit-mode-map (kbd "<DEL>") nil))

  (add-hook 'org-mode-hook 'enable-paredit-mode) ;; notice at the moment paredit is just bound to org-mode. Expand it.
#+END_SRC

#+RESULTS:


Rainbow-delimiters is convenient for coloring matching parentheses.

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters) 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode) ;; to enable it in all programming-related modes
   #+END_SRC
** Kill current buffer and close its window

#+BEGIN_SRC emacs-lisp
    ;; Always kill current buffer with "C-x k"
    (defun bjm/kill-this-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer))
      (delete-window))

    (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+END_SRC

In case you want to select as standard which buffer to kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC


** Save cursor current position when killing the file

   Using save-place-mode saves the location of point for every file I
   visit. If I close the file or close the editor, then later re-open
   it, point will be at the last place I visited.

#+BEGIN_SRC emacs-lisp
    (save-place-mode t)
#+END_SRC


** Highlight current line

#+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)
#+END_SRC


** Inhibit start up messages

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t);; this will hide the initial tutorial
#+END_SRC

*** Remove Other start up buffers

#+BEGIN_SRC emacs-lisp
    ;; Makes *scratch* empty.
    (setq initial-scratch-message "")

    ;; Removes *scratch* from buffer after the mode has been set.
    (defun remove-scratch-buffer ()
      (if (get-buffer "*scratch*")
	  (kill-buffer "*scratch*")))
    (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+END_SRC

Uncomment the next buffer if you want to inhibit start up messages and
kill the buffer. 

#+BEGIN_SRC emacs-lisp
    ;; Removes *messages* from the buffer.
    ;;(setq-default message-log-max nil)
    ;;(kill-buffer "*Messages*")
#+END_SRC


** Theme

*Reminder:* Check the face you are for adapting the colors by using /C-u C-x =/

*** Load Monokai theme as standard theme

    #+BEGIN_SRC emacs-lisp
     (use-package monokai-theme
     :ensure t)

      (load-theme 'monokai t) ;; load the black monokai theme  
    #+END_SRC

    #+RESULTS:
    : t

    Set the header color for org mode in Monokai

    #+BEGIN_SRC emacs-lisp
      (custom-set-faces
       '(org-level-1 ((t (:foreground "spring green"))))
       '(org-level-2 ((t (:foreground "light blue"))))
       '(org-level-3 ((t (:foreground "indian red"))))
       )
    #+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   ;; Change the color of the org chunks.
   '(org-block-begin-line
     ((t (:background:"#35331D" :foreground "#75715E" ))))
   '(org-block
     ((t (:background "#3E3D31" :foreground "#F8F8F0"))))  
   '(org-block-end-line
     ((t (:background:"#35331D" :foreground "#75715E" ))))
   '(font-lock-builtin-face
     ((t :foreground "cornflower blue"))) ;; this is the foreground for instance
   )

#+END_SRC

#+RESULTS:

Change line highlighting color for monokai. At the moment I could not
    find a nice option. But it annoys me that in org chunck it becomes
    almost indistinguishable. Maybe one day you will find the right
    color...
    
#+BEGIN_SRC emacs-lisp
      ;; (set-face-background 'hl-line "rosy brown")

      ;; ;To keep syntax highlighting in the current line:

      ;; (set-face-foreground 'highlight nil)
#+END_SRC

*** Use light theme for bright light

    Define function for customizing light theme with the colors you
    want. 

    Define global function that you can call to get the brighter theme.
    #+BEGIN_SRC emacs-lisp
	    (defun bright/light ()
	      (interactive)
              (use-package alect-themes
               :ensure t)

	      (load-theme 'alect-light t) 

	      (custom-set-faces

	       ;; Change the color of the org chunks.
	       '(org-block-begin-line
		 ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
	       '(org-block
		 ((t (:background "snow3"))))  
	       '(org-block-end-line
		 ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))

	       ;; Change color of the org headers
	       '(org-level-1 ((t (:foreground "indian red"))))
	       '(org-level-2 ((t (:foreground "#008ED1"))))
	       '(org-level-3 ((t (:foreground "sea green"))))
	       '(org-level-4 ((t (:foreground "salmon3"))))

	       ;; Specify the colors of strings etc...
	       '(font-lock-comment-face ((t :foreground "SeaGreen4"))) 
	       '(font-lock-builtin-face  ((t :foreground "blue"))) ;; this is the foreground for instance
	       '(font-lock-string-face  ((t :foreground "indian red"))) ;; this is the commentary and strings. Use it for custom set faces when you know it.
	       )

	       ;; Chnage color of global lining
	      (set-face-background 'linum "light grey")

	       ;; Change the color in the minibuffer prompt to read better
	      (set-face-foreground 'minibuffer-prompt "indian red")
	      (set-face-background 'minibuffer-prompt "white") 

	       ;; Chnage standard color for org chunks
	      (set-face-foreground 'org-block "black")

	       ;; Org link color
	      (set-face-foreground 'org-link "blue")

	       ;; Shell prompt
	      (set-face-foreground 'comint-highlight-prompt "#008ED1")

               ;; Folder directories
              (set-face-foreground 'dired-directory "blue")
	    )
    #+END_SRC

    #+RESULTS:
    : bright/light

