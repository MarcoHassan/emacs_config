
* Notes

Note that this is an experimentation integrating WSL on window emacs.

In general there are too many conflicts. The major ones discovered to
the point are the issues with "sudo orders". These cannot be properly
integrated in this WSL-Windows Emacs. Moreover this solution does not
manage to integrate properly git. Git repositories are not recognized
as such and difficulties arise when pulling and pushing.

Note however that when installing emacs on the Ubuntu partition and
calling emacs in that partition everything integrates well.

This is therefore a very nice and powerful feature and it suggest to
switch to this solution. 



* For Mac Specific Issues

#+BEGIN_SRC emacs-lisp
;; I set this at the beginning of my init.el for other mac specific settings
(defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

#+RESULTS:


* General sources

As a general resources for generating my emacs configuration I mainly
refer to [[https://cestlaz.github.io/tags/emacs/page/6/][emacs_intro_&packages]], [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz emacs config]]. Harry
Schwartz shared a video on the internet containing a good introduction
to the org mode and suggested the option of writing the emacs
configuration file as =org= file as I am currently doing, which I
enjoy a lot and believe it gives a great overview over the document.

** TODO watch [[https://www.youtube.com/watch?v=GK3fij-D1G8][this]] incredible video describing literate programming within Org-mode and try to incorporate the mode
   :PROPERTIES:
   :ID:       e630a79e-6f1e-48c8-9594-744ac1f36184
   :END:


* Increase cache allowed

From Howard Abraham...

With a long history of working on small machines without gigabytes of RAM, we might as well let Emacs be the beast it has always dreamed.

First, letâ€™s increase the cache:

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 50000000)
#+END_SRC


* Shortcut to Configuration File

This section creates a shortcut key to go to this =emacs=
configuration file without having to search for the directory.
#+BEGIN_SRC emacs-lisp
    (defun hrs/visit-emacs-config ()
      (interactive)
      (find-file "~/Desktop/emacs_config/Emacs Configuration/emacs_configuration.org"))

    (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)

#+END_SRC

#+RESULTS:
: hrs/visit-emacs-config


* Ensure Use-package

This package assure that you do not have to download all of the
packages manually and it downloads all of the necessary packages
automatically and open them with the predefined configuration options.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t


* Make sure you can use standard lisp functions and macros

#+BEGIN_SRC emacs-lisp
  (require 'cl)
#+END_SRC


* Enable MELPA package manager

  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			(not (gnutls-available-p))))
	   (proto (if no-ssl "http" "https")))
      ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
      (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
      (when (< emacs-major-version 24)
	;; For important compatibility libraries like cl-lib
	(add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
    (package-initialize)
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(package-selected-packages
       (quote
	(org-bullets htmlize auctex virtualenvwrapper pyenv-mode ein py-autopep8 flycheck elpy monokai-theme))))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )
  #+END_SRC


* Enable Marmalade and Org ELPA package manager

Org ELPA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

#+RESULTS:
: ((marmalade . http://marmalade-repo.org/packages/) (marmalade . http://orgmode.org/packages/) (gnu . https://elpa.gnu.org/packages/) (melpa-stable . https://stable.melpa.org/packages/) (org . https://orgmode.org/elpa/))

Marmalade
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("marmalade" .  "http://marmalade-repo.org/packages/"))
#+END_SRC





* Basic Customization

** Set global encoding 

#+BEGIN_SRC emacs-lisp
;; UTF-8 as default encoding
(set-language-environment "utf-8")
(prefer-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC

** No beeps, scrollbar etc.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)             ;; Get rid of the beeps

(when (window-system)
  (tool-bar-mode 0)               ;; Toolbars were only cool with XEmacs
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
  (scroll-bar-mode -1))            ;; Scrollbars are waste screen estate
#+END_SRC

#+RESULTS:

** Highlight color

   Set highlight color when activate the "mark set" to be a different
   color than gray as it is poorly recognizable with the theme and the
   line highlighting mode.

#+BEGIN_SRC emacs-lisp
      (defun color-highlight ()
	(interactive)
	(set-face-attribute 'region nil :background "indian red" :foreground "grey5"))
#+END_SRC
#+RESULTS:
: color-highlight

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'color-highlight) ;; to actiavte it when starting emacs.
#+END_SRC

Create general function to set transparency.
#+BEGIN_SRC emacs-lisp
 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

** Two very handy tricks from Howard Abraham

   - Replace yes-no answers with y-n. 

   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   - Fix the scrolling =C-v= and =M-v= such that the cursor will
     return to the previous scrolling position if going down and up.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
          scroll-preserve-screen-position t)
   #+END_SRC

   #+RESULTS:
   : t

** Undo Redo Tree 
   
   This is a very nice package that allows you to expand on the basics
   emacs undo functionalities. In emacs you can undo with =C-_= or
   =C-/=.

   The package undo-tre allows you to have the redo option with
   =C-?=.

   Moreover it allows you to visualize a tree with the changes you
   have done and to move interactively across it to go back to a given
   point in you history. 

   If you code something and then cancel that something and code
   something else, the undo tree will show a branch at this stage
   with the two versions of your edit.

   Require the package and enable it globally.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
     :ensure t
     :init
     (global-undo-tree-mode))
   #+END_SRC

** Parenthesis

   Try this package for parenthesis highlighting. 

   Learn how to quickly operate with parenthesis using predit through
   the following link [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][predit-tutorial.]]

   #+BEGIN_SRC emacs-lisp
   (use-package paredit
   :ensure t) 
   (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
   #+END_SRC

   #+RESULTS:

   Despite being super useful paredit unfortunately conflicts with the
   usual <DEL>. This will not allow to cancel entire chunks of
   highlighted text. Set another key binding for paredit delete.

   Notice the code below removes the paredit delete altogether because
   I do not find it that useful. Another option would just to add
   another line shifting the paredit =<DEL>= to some other key binding. 

#+BEGIN_SRC emacs-lisp
  (eval-after-load "paredit" '(define-key paredit-mode-map (kbd "<DEL>") nil))

  (add-hook 'org-mode-hook 'enable-paredit-mode) ;; notice at the moment paredit is just bound to org-mode. Expand it.
#+END_SRC

#+RESULTS:


Rainbow-delimiters is convenient for coloring matching parentheses.

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters) 
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode) ;; to enable it in all programming-related modes
   #+END_SRC
** Kill current buffer and close its window

#+BEGIN_SRC emacs-lisp
    ;; Always kill current buffer with "C-x k"
    (defun bjm/kill-this-buffer ()
      "Kill the current buffer."
      (interactive)
      (kill-buffer (current-buffer))
      (delete-window))

    (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
#+END_SRC

#+RESULTS:
: bjm/kill-this-buffer

In case you want to select as standard which buffer to kill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x K") 'kill-buffer)
#+END_SRC

** Save cursor current position when killing the file

   Using save-place-mode saves the location of point for every file I
   visit. If I close the file or close the editor, then later re-open
   it, point will be at the last place I visited.

#+BEGIN_SRC emacs-lisp
    (save-place-mode t)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)
#+END_SRC

** Inhibit start up messages

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t);; this will hide the initial tutorial
#+END_SRC

*** Remove Other start up buffers

#+BEGIN_SRC emacs-lisp
    ;; Makes *scratch* empty.
    (setq initial-scratch-message "")

    ;; Removes *scratch* from buffer after the mode has been set.
    (defun remove-scratch-buffer ()
      (if (get-buffer "*scratch*")
	  (kill-buffer "*scratch*")))
    (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+END_SRC

Uncomment the next buffer if you want to inhibit start up messages and
kill the buffer. 

#+BEGIN_SRC emacs-lisp
    ;; Removes *messages* from the buffer.
    ;;(setq-default message-log-max nil)
    ;;(kill-buffer "*Messages*")
#+END_SRC

** Theme

*Reminder:* Check the face you are for adapting the colors by using /C-u C-x =/

*** Load Monokai theme as standard theme

    #+BEGIN_SRC emacs-lisp
     (use-package monokai-theme
     :ensure t)

      (load-theme 'monokai t) ;; load the black monokai theme  
    #+END_SRC

    #+RESULTS:
    : t

    Set the header color for org mode in Monokai

    #+BEGIN_SRC emacs-lisp
      (custom-set-faces
       '(org-level-1 ((t (:foreground "spring green"))))
       '(org-level-2 ((t (:foreground "light blue"))))
       '(org-level-3 ((t (:foreground "indian red"))))
       )
    #+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   ;; Change the color of the org chunks.
   '(org-block-begin-line
     ((t (:background:"#35331D" :foreground "#75715E" ))))
   '(org-block
     ((t (:background "#3E3D31" :foreground "#F8F8F0"))))  
   '(org-block-end-line
     ((t (:background:"#35331D" :foreground "#75715E" ))))
   '(font-lock-builtin-face
     ((t :foreground "cornflower blue"))) ;; this is the foreground for instance
   )

#+END_SRC

#+RESULTS:

Change line highlighting color for monokai. At the moment I could not
    find a nice option. But it annoys me that in org chunck it becomes
    almost indistinguishable. Maybe one day you will find the right
    color...
    
#+BEGIN_SRC emacs-lisp
      ;; (set-face-background 'hl-line "rosy brown")

      ;; ;To keep syntax highlighting in the current line:

      ;; (set-face-foreground 'highlight nil)
#+END_SRC

*** Use light theme for bright light

    Define function for customizing light theme with the colors you
    want. 

    Define global function that you can call to get the brighter theme.
    #+BEGIN_SRC emacs-lisp
	    (defun bright/light ()
	      (interactive)
              (use-package alect-themes
               :ensure t)

	      (load-theme 'alect-light t) 

	      (custom-set-faces

	       ;; Change the color of the org chunks.
	       '(org-block-begin-line
		 ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
	       '(org-block
		 ((t (:background "snow3"))))  
	       '(org-block-end-line
		 ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))

	       ;; Change color of the org headers
	       '(org-level-1 ((t (:foreground "indian red"))))
	       '(org-level-2 ((t (:foreground "#008ED1"))))
	       '(org-level-3 ((t (:foreground "sea green"))))
	       '(org-level-4 ((t (:foreground "salmon3"))))

	       ;; Specify the colors of strings etc...
	       '(font-lock-comment-face ((t :foreground "SeaGreen4"))) 
	       '(font-lock-builtin-face  ((t :foreground "blue"))) ;; this is the foreground for instance
	       '(font-lock-string-face  ((t :foreground "indian red"))) ;; this is the commentary and strings. Use it for custom set faces when you know it.
	       )

	       ;; Chnage color of global lining
	      (set-face-background 'linum "light grey")

	       ;; Change the color in the minibuffer prompt to read better
	      (set-face-foreground 'minibuffer-prompt "indian red")
	      (set-face-background 'minibuffer-prompt "white") 

	       ;; Chnage standard color for org chunks
	      (set-face-foreground 'org-block "black")

	       ;; Org link color
	      (set-face-foreground 'org-link "blue")

	       ;; Shell prompt
	      (set-face-foreground 'comint-highlight-prompt "#008ED1")

               ;; Folder directories
              (set-face-foreground 'dired-directory "blue")
	    )
    #+END_SRC

    #+RESULTS:
    : bright/light

** Set lining globally
#+BEGIN_SRC emacs-lisp
      (global-linum-mode t) ;; load line number at the beginning of the
			    ;; file. Notice the global argument means that
			    ;; this line configuration will apply to all
			    ;; buffers in emacs. You can also enable things
			    ;; per mode - e.g., python-mode, markdown-mode,
			    ;; text-mode.
      
#+END_SRC

** Moving across windows

#+BEGIN_SRC emacs-lisp
  ; add this to init.el
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC

To move across windows holding the shift key

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)

;; Make windmove work in Org mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

#+RESULTS:
** Hungry mode
*** Smart hungry mode

    Try to use the smart-hungry-delete that sets the global keys
    explicitly.

    Download the package manually from [[https://github.com/hrehfeld/emacs-smart-hungry-delete][smart_hungry-github]]. Could not
    find the package on MELPA.

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/Users/marcohassan/.emacs.d/emacs-smart-hungry-delete/")
 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC emacs-lisp
  (load "smart-hungry-delete")
 #+END_SRC 

 #+RESULTS:
 : t

   Add forward hungry deletion

 #+BEGIN_SRC emacs-lisp
   (smart-hungry-delete-add-default-hooks)
   (global-set-key (kbd "C-c d") 'smart-hungry-delete-forward-char)
   (global-set-key (kbd "C-c <backspace>") 'smart-hungry-delete-backward-char)
 #+END_SRC

 #+RESULTS:
 : smart-hungry-delete-backward-char
** Expand region

   This package allows you to expand the highlighting from inside to
   outside. That is from the inner most layer to the layers above. For
   instance if you are into a parenthesis it will allow you to expand
   from letter to word, to the entire parenthesis, function, etc.

#+BEGIN_SRC emacs-lisp
  ;; (use-package expand-region
  ;;   :ensure t 
  ;;   :config
  ;;   (global-set-key (kbd "C-*") 'er/expand-region)
  ;; )
#+END_SRC

New version of expand region. Try it and see which one you like better

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (defun ha/expand-region (lines)
    "Prefix-oriented wrapper around Magnar's `er/expand-region'.

Call with LINES equal to 1 (given no prefix), it expands the
region as normal.  When LINES given a positive number, selects
the current line and number of lines specified.  When LINES is a
negative number, selects the current line and the previous lines
specified.  Select the current line if the LINES prefix is zero."
    (interactive "p")
    (cond ((= lines 1)   (er/expand-region 1))
          ((< lines 0)   (ha/expand-previous-line-as-region lines))
          (t             (ha/expand-next-line-as-region (1+ lines)))))

  (defun ha/expand-next-line-as-region (lines)
    (message "lines = %d" lines)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line lines))

  (defun ha/expand-previous-line-as-region (lines)
    (end-of-line)
    (set-mark (point))
    (beginning-of-line (1+ lines)))

  :bind ("C-*" . ha/expand-region))
#+END_SRC

#+RESULTS:
: ha/expand-region
** Autofill Mode

Goes to next line on the next space when the line becomes too wide.

#+BEGIN_SRC emacs-lisp
;;  (setq-default auto-fill-function 'do-auto-fill)

   (add-hook 'org-mode-hook 'turn-on-auto-fill)

;;  go to next line but in a horrible way at this stage. try to fix
;;  the issue.
#+END_SRC

#+RESULTS:

To set the width of the column for which the entry must go to the new
line, check at the following [[https://www.emacswiki.org/emacs/FillParagraph][page]].

** Beacon Mode

   This emits a short light when the you move your cursor around the
   screen in a fast way. That should help you to quickly identify
   where your cursor is and not to get lost when quickly scrolling on
   the screen.

   You can set in the parameter for deciding when the beacon should
   work. Moreover, you define how long the light should flash. For
   this and several other options check at the github repo [[https://github.com/Malabarba/beacon][beacon]].

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t 
    :config
    (beacon-mode 1)
    (setq beacon-color "#50D050") ;; a light green
   )
#+END_SRC

#+RESULTS:
: t

   Work nicely. Seems to slow emacs though. Try to observe on the long
   run if it slows it sensibly and remove it if this is the case. 

** Unfill paragraph

   Might be good. For instance for canceling all of the paragraph quickly
   or for commenting it away.

   #+BEGIN_SRC emacs-lisp
   (defun unfill-paragraph ()
      "Convert a multi-line paragraph into a single line of text."
      (interactive)
      (let ((fill-column (point-max)))
        (fill-paragraph nil)))

    ;; Handy key definition
    (define-key global-map "\M-Q" 'unfill-paragraph)
   #+END_SRC

** Aggressive Indent

   Automatically indents all of your code. 

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
  :ensure t)

  (global-aggressive-indent-mode)
#+END_SRC

#+RESULTS:
: t

** Set Default Size for all Buffers

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 150)
#+END_SRC


* Swiper for incremental search

Swiper allows you to easily leverage regular expressions. By entering
a the beginning of a word a space and some other parts of the next
world it will automatically search two words pairs each containing the
expression entered.

Before compiling the code below remember to install through melpa both
swiper as counsel.

#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
:ensure t
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))
#+END_SRC

#+RESULTS:
: t


* Auto completion of words

To automatically advice on auto-completion given the words used in the
buffer.

** Company

*** General set up.

Try with company mode. Company mode integrates with flyspell in
org-mode and it is there chosen as the default auto-completion mode
for the org-mode.
#+Name: Company-auto-complete
#+BEGIN_SRC emacs-lisp
      (use-package company
	:config
        (setq company-dabbrev-downcase 0) ;; I noted that company is particularly slow in suggesting auto-completion words in comparison to auto-complete. 
        (setq company-idle-delay 0)       ;; The below code was suggested on the internet to speed company suggestion up and is tried now.
	(global-company-mode t)                                  ;(add-hook 'org-mode-hook 'company-mode)
	 )
#+END_SRC

#+RESULTS: Company-auto-complete
: t

The performance of company increased a lot with the two global options.

*** Synchronize company with pcomplete for org mode 

    Pcomplete integrates company such that when editing headers,
    processes, title and author and any other options in org mode
    starting with =#+= it will list all of the available options.

#+BEGIN_SRC emacs-lisp
(defun trigger-org-company-complete ()
  "Begins company-complete in org-mode buffer after pressing #+ chars."
  (interactive)
  (if (string-equal "#" (string (preceding-char)))
    (progn
      (insert "+")
      (company-complete))
    (insert "+")))

(eval-after-load 'org '(define-key org-mode-map
               (kbd "+") 'trigger-org-company-complete))
#+END_SRC

#+RESULTS:
: trigger-org-company-complete

*** Company cycle through

Very handy way to work with company such that you do not have to enter
the word you are interested in with the =RET= command but can rather
cycle through them with the =TAB= command. This will autocomplete the
word and you can then continue writing with the space.

Link for this handy tool: [[https://gist.github.com/aaronjensen/a46f88dbd1ab9bb3aa22][cycle_company]].

 #+BEGIN_SRC emacs-lisp
 ;; Modify company so that tab and S-tab cycle through completions without
 ;; needing to hit enter.

 (defvar-local company-simple-complete--previous-prefix nil)
 (defvar-local company-simple-complete--before-complete-point nil)

 (defun company-simple-complete-frontend (command)
   (when (or (eq command 'show)
             (and (eq command 'update)
                  (not (equal company-prefix company-simple-complete--previous-prefix))))
     (setq company-selection -1
           company-simple-complete--previous-prefix company-prefix
           company-simple-complete--before-complete-point nil)))

 (defun company-simple-complete-next (&optional arg)
   (interactive "p")
   (company-select-next arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete-previous (&optional arg)
   (interactive "p")
   (company-select-previous arg)
   (company-simple-complete//complete-selection-and-stay))

 (defun company-simple-complete//complete-selection-and-stay ()
   (if (cdr company-candidates)
       (when (company-manual-begin)
         (when company-simple-complete--before-complete-point
           (delete-region company-simple-complete--before-complete-point (point)))
         (setq company-simple-complete--before-complete-point (point))
         (unless (eq company-selection -1)
           (company--insert-candidate (nth company-selection company-candidates)))
         (company-call-frontends 'update)
         (company-call-frontends 'post-command))
     (company-complete-selection)))

 (defadvice company-set-selection (around allow-no-selection (selection &optional force-update))
   "Allow selection to be -1"
   (setq selection
         ;; TODO deal w/ wrap-around
         (if company-selection-wrap-around
             (mod selection company-candidates-length)
           (max -1 (min (1- company-candidates-length) selection))))
   (when (or force-update (not (equal selection company-selection)))
     (setq company-selection selection
           company-selection-changed t)
     (company-call-frontends 'update)))

 (defadvice company-tooltip--lines-update-offset (before allow-no-selection (selection _num-lines _limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (defadvice company-tooltip--simple-update-offset (before allow-no-selection (selection _num-lines limit))
   "Allow selection to be -1"
   (when (eq selection -1)
     (ad-set-arg 0 0)))

 (with-eval-after-load 'company
   (define-key company-active-map [tab] 'company-simple-complete-next)
   (define-key company-active-map (kbd "TAB") 'company-simple-complete-next)
   (define-key company-active-map (kbd "<S-tab>") 'company-simple-complete-previous)
   (define-key company-active-map (kbd "RET") nil)
   (define-key company-active-map (kbd "<return>") nil)

   (put 'company-simple-complete-next 'company-keep t)
   (put 'company-simple-complete-previous 'company-keep t)
   (setq company-require-match nil)
   (ad-activate 'company-set-selection)
   (ad-activate 'company-tooltip--simple-update-offset)
   (ad-activate 'company-tooltip--lines-update-offset)
   (add-to-list 'company-frontends 'company-simple-complete-frontend))

 (provide 'company-simple-complete)
 #+END_SRC

 #+RESULTS:
 : company-simple-complete

 
* Redirect Back up files into a single file

This saves all of the back-up files in the =.~/.saves=  directory and
keeps your other directories clear from them.

#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

#+RESULTS:
: ((. . ~/.saves))


* Set Ispell Dictionary

Since emacs 24.4+ ispell.el has built-in support for detecting
Hunspell dictionaries and there is no manual configuration needed.

Just specify the global language that should be used when using the
dictionary.

#+Name: Ispell 
#+BEGIN_SRC emacs-lisp 
    (setq ispell-dictionary "english")
#+END_SRC

#+RESULTS: Ispell
: english

Notice that you have both to install ispell and aspell through brew on OSX.


* Snippets

Snippets are a powerful tool that consists of pre-compiled code that
you can enter through some shortcuts. You can either enter and save
your own snippet or you can leverage the already built-in
snippets. These are various and allows you for instance to create
classes, open loops, etc. 

The package for working with snippets is =yasnippet= and the
documentation for the various snippets can be found at

#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet

  :ensure t
  :init
  (yas-global-mode 1))
#+END_SRC

#+RESULTS:

** Yasnippet-snippets

   Also download the yasnippet-snippets library. There are many more
   snippets there in comparison to the one included in the auto-yasnippet
   above and I believe it might be useful working with these.

   In his documentation he says that all the snippets will load
   automatically as soon as yasnippet loads. Let's see.

   Nice. This was correct. Once you downlaod the package through MELPA or
   manually setting it into your working directory the snippets will
   automatically be avaiable. No need for configuration in emacs.


* Tramp

  Built in. Read on how to integrate it again.

  To be implemented using: [[https://cestlaz.github.io/posts/using-emacs-25-tramp/][tramp_tut]].


  
* Org Mode

Very nice mode.

#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

** Basic configuration: 

   #+begin_src emacs-lisp 
     ;; To open all .org files in org mode.
     (autoload 'org-mode "org-mode" "Org Mode." t)

     ;; workaround for not workign source code shortcut
     (when (version<= "9.2" (org-version))
       (require 'org-tempo))
   #+end_src

Switch among org buffers. This is a new feature intended to save time
as you will be prompted just with org buffers when changing buffers.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o") 'org-switchb)

(global-set-key (kbd "\M-q") 'fill-paragraph)
#+End_Src

#+Results:
: fill-paragraph

#+Begin_Src emacs-lisp 
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src 

#+RESULTS:
: 0
** Store link to current file

#+begin_src emacs-lisp 
    (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src 

#+RESULTS:
: org-store-link

** Export modes

This modes are not found on mac. So far not important as I never
really worked with them. Check at a later point in case of need.

#+BEGIN_SRC emacs-lisp
  ;; ;; Exporting in markdown and beamer mode
  ;; (use-package ox-md
  ;;  :ensure t)
  ;; (use-package ox-beamer
  ;;  :ensure t)
#+END_SRC

#+RESULTS:

** Ob-ipyhton

   To run jupyter like workflow in org mode displaying graphs, using
   multiple languages etc. Notice at the moment I have issue. 

   Package is not on MELPA, but it should. Install it manually. Then you should
   be able to run the below and start to operate through in org-mode
   via ob-ipython.

   I downloaded the package manually in the =.emacs.d= folder. Load it
   adding it to your load path.

   #+BEGIN_SRC emacs-lisp
     ;; Tell emacs where is your personal elisp lib dir
     (add-to-list 'load-path "/Users/marcohassan/.emacs.d/ob-ipython/")

   #+END_SRC

   #+RESULTS:


   #+BEGIN_SRC emacs-lisp
     (use-package dash-functional
     :ensure t)

     (use-package s
     :ensure t)     

     (use-package f
     :ensure t)     

     (load "obipython")

      ;;; display/update images in the buffer after I evaluate
     (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
   #+END_SRC

   #+RESULTS:

** Layout

   #+BEGIN_SRC emacs-lisp

     ;; Use syntax highlighting in source blocks while editing.
     (setq org-src-fontify-natively t)

     ;; Make TAB act as if it were issued in a buffer of the languages major mode.
     (setq org-src-tab-acts-natively t)

     ;; I like to see an outline of pretty bullets instead of a list of asterisks.
     (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode))

     ;; I like seeing a little downward-pointing arrow instead of the usual
     ;; ellipsis (...) that org displays when there is stuff under a header.
     (setq org-ellipsis " >>")
   #+END_SRC

   #+RESULTS:
   :  >>

** Grammar Check

   #+BEGIN_SRC emacs-lisp
     ;; Activate flyspell for org documents.
     (use-package flyspell
       :ensure t
       :config
       (add-hook 'org-mode-hook 'flyspell-mode))
   #+END_SRC

   #+RESULTS:
   : t

** Babel

   #+BEGIN_SRC emacs-lisp
   ;; For babel evaluing in R
   ;;(require 'ess-site)

   ;; Allowing minted to highlight code in latex mode when exporting
   (setq org-latex-pdf-process
	 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

   (add-to-list 'org-latex-packages-alist '("" "minted"))
   (setq org-latex-listings 'minted)

   ;; Allow code evaluation in the org mode source code chunck

   (use-package gnuplot
     :ensure t) ;; recall to download it trough MELPA at first

   (org-babel-do-load-languages
    'org-babel-load-languages
    '((C . t)
      (R . t)
      (sql . t)
      (python . t)
      (ipython . t)
      (shell . t)
      (emacs-lisp . t)
      (latex . t)
      ))

   ;; Don't ask before executing code in the chunck.
   (setq org-confirm-babel-evaluate nil)
   #+END_SRC

   #+RESULTS:

** Agenda
*** General Configuration

   #+BEGIN_SRC emacs-lisp
     ;; Shortcut for org agenda
     (define-key global-map "\C-ca" 'org-agenda)


     ;; specify to-do iterations with C-c t
     (setq org-todo-keywords
	   '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  #+END_SRC

*** Open agenda into its own buffer
 #+BEGIN_SRC emacs-lisp
 (defun air-pop-to-org-agenda (split)
   "Visit the org agenda, in the current window or a SPLIT."
   (interactive "P")
   (org-agenda-list)
   (when (not split)
     (delete-other-windows)))

 (define-key global-map (kbd "C-c t a") 'air-pop-to-org-agenda)
 #+END_SRC

*** Task and org-capture management

    Orgmobile configuration.

    Org mode has the customizable variable org-agenda-files. The files
    listed by absolute path under this variable are used for building
    the org agenda window. If an element in the list is a directory,
    then all .org files matching the org-agenda-regex are processed to
    build the agenda view.

    #+BEGIN_SRC emacs-lisp
    ;; Create and Specify Agenda folder.
    (setq org-agenda-files (list "~/Dropbox/Agenda"
			         "~/Desktop/org/inbox.org"
				 "~/Desktop/TODOs/"))
    #+END_SRC

    #+RESULTS:
    | ~/Dropbox/Agenda | ~/Desktop/org/inbox.org | ~/Desktop/TODOs/ |

    #+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Desktop/org")

    (setq org-mobile-inbox-for-pull "~/Desktop/org/inbox.org")

    (setq org-mobile-directory "~/Dropbox/Applicazioni/MobileOrg/") 
    #+END_SRC

    #+RESULTS:
    : ~/Dropbox/Applicazioni/MobileOrg/

    Notice that to pull the agendas entries from the mobile; you have to
    save them in the =mobileorg.org= file in the
    =Dropbox/Applicazioni/Mobileorg= folder. Just then you will be able to
    pull the agenda into the ~org-mobile-inbox-for-pull~ above. 


    The checksum are a nice way to speed up synchronization in the
    sense that just things that where not changed will be
    synchronized. The checksum is the way to see whether the documents
    were synchronized or not.


    #+begin_src emacs-lisp 
    ;; (defcustom org-mobile-checksum-binary "/usr/bin/shasum"
    ;;    "Executable used for computing checksums of agenda files."
    ;;    :group 'org-mobile
    ;;    :type 'string)
    #+end_src 

    #+RESULTS:
    : org-mobile-checksum-binary

*** Archiving

    #+BEGIN_SRC emacs-lisp
      ;; Set archiving location.
      (setq org-archive-location "~/Desktop/Archive/archive.org::* From %s")

      ;; Done and archive
      (defun mark-done-and-archive ()
	"Mark the state of an org-mode item as DONE and archive it."
	(interactive)
	(org-todo 'done)
	(org-archive-subtree))

      (define-key org-mode-map (kbd "C-c C-x C-s") 'mark-done-and-archive)

      ;; Record the time that a todo was archived.
      (setq org-log-done 'time)
    #+END_SRC


** Capture
   
   This section frames the way in which to capture short notes and to
   do stuff in the middle of the day. Here everyday tasks will be
   saved.

#+begin_src emacs-lisp 
;; where the notes will be stored. the reference is the previously
;; defined org directory.
(setq org-default-notes-file "~/Desktop/TODOs/capture.org")
#+end_src 

#+RESULTS:
: ~/Desktop/TODOs/capture.org

Define the global map for using org-capture

#+begin_src emacs-lisp 
(global-set-key  (kbd "\C-c c")  'org-capture)
#+end_src 

#+RESULTS:
: org-capture

This is the templates that will allow you to quickly add notes to your
capture.org file.

#+begin_src emacs-lisp 
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Desktop/TODOs/capture.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("n" "note" entry (file "~/Desktop/TODOs/capture.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              )))
#+end_src 



* Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
  ;; Later on, after loading exec-path-from-shell package

  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
#+END_SRC

#+RESULTS:
: projectile-command-map


* Python

Set path to python executable so that emacs can leverage it. This
step is necessary when operating through Windows OS.

#+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (put 'set-goal-column 'disabled nil)
      (elpy-enable)
      (setq elpy-rpc-ignored-buffer-size (* 1024 1024 1024))
      (setq python-indent-offset 4)

      ;; interactive python
      (setq python-shell-interpreter "python3" ;; "ipython"
	    elpy-rpc-python-command "python3"  ;; "ipython"
	    python-shell-interpreter-args "-i"));; "-i --simple-promt"

    ;; notice that ipython functions just with orgbabel combination on the
    ;; mac. there are currently soume issues to be solved. this causes
    ;; isssues when editing with C-c ' on mac. 

    (when (require 'flycheck  nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))


    ;; (use-package elpy
    ;;   :ensure t)
    ;; (elpy-enable) ;; initialize elpy for python IDE in emacs

    ;; ;; Activate flycheck instead of flymake from eply package
    ;; (when (require 'flycheck  nil t)
    ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    ;;   (add-hook 'elpy-mode-hook 'flycheck-mode))

    ;; ;; Activate autopep. This integrates with Emacs so that when you save a
    ;; ;; file trough the -C-x C-s- cmd it will automatically format and correct
    ;; ;; any PEP8 errors (excluding the ones that you may specify)

    ;; Did not especially appreciated autopep8. Leave it out.
    (use-package py-autopep8
      :ensure t)
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

    ;; ;; Integrate the eply mode with the IPython REPL and the Jupyter Notebooks.
    ;; ;; This will allow to run Jupyter Notebooks that looks  very much like
    ;; ;; R .rmd files directly on Emacs !after connecting to the notebook online!

    ;; (setq python-shell-interpreter "ipython" 
    ;; 	python-shell-interpreter-args "-i --simple-prompt");; uses ipython interpreter. Please remember on Windows systems that you have to download python on winodws and install ipython through the automatically downloaded pip. Then add to the path the folder including ipython and you are good to go.

    ;; ;; Set standard python interpreter as python 3
    ;; (setq elpy-rpc-python-command "ipython")

    ;; Set up virtual environments emacs connection
    (use-package virtualenvwrapper
      :ensure t)
    (venv-initialize-interactive-shells) ;; if you want interactive shell support
    (venv-initialize-eshell) ;; if you want eshell support
    ;; note that setting `venv-location` is not necessary if you
    ;; use the default location (`~/.virtualenvs`), or if the
    ;; the environment variable `WORKON_HOME` points to the right place
    (setq venv-location "/Users/marcohassan/Desktop/python_venv")

    ;; Add hook for cÃ²mment highlighting.
    ;;(add-hook 'python-mode-hook 'add-custom-keyw)
#+END_SRC

#+RESULTS:
: /Users/marcohassan/Desktop/python_venv

#+RESULTS: Python Mode and virtual environment activation.
| add-custom-keyw | elpy-mode |

Good. After installing ipyhton thorugh pip everything is working
smoothly. Remember to run pip on DOS and not on emacs shell as at the
moment emacs shell is set to be the shell interacting with the Linux
partition.


* YAML

#+begin_src emacs-lisp 
(use-package yaml-mode
  :ensure t)

(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+end_src 

#+RESULTS:
: ((\.yml\' . yaml-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (.*\.ipynb\' . ein:ipynb-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode))


* Mac adjustments

#+BEGIN_SRC emacs-lisp
   (if *is-a-mac*
     (add-hook 'after-init-hook
   	    (progn
   	      ;; "fix" the broken keyboard                                        
   	      (global-set-key "\M-1" '(lambda () (interactive) (insert "@")))
   	      (global-set-key "\M-5" '(lambda () (interactive) (insert "[")))
   	      (global-set-key "\M-6" '(lambda () (interactive) (insert "]")))
   	      (global-set-key "\M-7" '(lambda () (interactive) (insert "|")))
   	      (global-set-key "\M-/" '(lambda () (interactive) (insert "\\")))
   	      (global-set-key "\M-8" '(lambda () (interactive) (insert "{")))
   	      (global-set-key "\M-9" '(lambda () (interactive) (insert "}")))
   	      (global-set-key "\M-3" '(lambda () (interactive) (insert "#")))
   	      (global-set-key "\M-2" '(lambda () (interactive) (insert "~"))))))
#+END_SRC

#+RESULTS:


* Eshell 

Fancy Prompt
#+BEGIN_SRC emacs-lisp
  (defun with-face (str &rest face-plist)
    (propertize str 'face face-plist))

  (defun shk-eshell-prompt ()
    (let ((header-bg "#292929"))   
      (concat
       (with-face (concat (eshell/pwd) " ") :background header-bg :foreground "green")
       (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
       (with-face
	(or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
	:background header-bg)
       (with-face "\n" :background header-bg)
       (with-face user-login-name :foreground "indian red")
       "@"
       (with-face "localhost" :foreground "sea green")
       (if (= (user-uid) 0)
	   (with-face " #" :foreground "red")
	 " $ "))))

  (setq eshell-prompt-function 'shk-eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+END_SRC

#+RESULTS:

A built in solution for search of history commands.

#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook
	    (lambda ()
	      (local-set-key (kbd "C-c h")
			     (lambda ()
			       (interactive)
			       (insert
				(ido-completing-read "Eshell history: "
						     (delete-dups
						      (ring-elements eshell-history-ring))))))
	      ))
#+END_SRC

#+RESULTS:

Open Eshell at Start-up

#+BEGIN_SRC emacs-lisp
(cd "/Users/marcohassan/Desktop/")
(eshell)
(delete-other-windows)
#+END_SRC


Eshell is great but if you do not start eshell from within a terminal,
it has difficulties to run programs listed in the environment PATH.

Interestingly this fixes the issue just if it is the last statement of
the emacs configuration file. 

#+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
   :ensure t)
   ;; Later on, after loading exec-path-from-shell package

   (if *is-a-mac*
       (add-hook 'after-init-hook 'exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:


